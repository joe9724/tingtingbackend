// Code generated by go-swagger; DO NOT EDIT.

package app_ver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// AppVersionDetailHandlerFunc turns a function with the right signature into a app version detail handler
type AppVersionDetailHandlerFunc func(AppVersionDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppVersionDetailHandlerFunc) Handle(params AppVersionDetailParams) middleware.Responder {
	return fn(params)
}

// AppVersionDetailHandler interface for that can handle valid app version detail params
type AppVersionDetailHandler interface {
	Handle(AppVersionDetailParams) middleware.Responder
}

// NewAppVersionDetail creates a new http.Handler for the app version detail operation
func NewAppVersionDetail(ctx *middleware.Context, handler AppVersionDetailHandler) *AppVersionDetail {
	return &AppVersionDetail{Context: ctx, Handler: handler}
}

/*AppVersionDetail swagger:route GET /appVersion/detail AppVer appVersionDetail

版本详情

详情

*/
type AppVersionDetail struct {
	Context *middleware.Context
	Handler AppVersionDetailHandler
}

func (o *AppVersionDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppVersionDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok AppVersionDetailOK
	var response models.InlineResponse20040

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//query
	var version models.AppVersion
	db.Table("init").Where("id=?",Params.ID).First(&version)

	rows, err := db.Raw("select id,downloadUrl,`force`,number,msg,client,cover from init where id=?",*(Params.ID)).Rows()
	if err !=nil{
		fmt.Println("err is",err.Error())
	}
	fmt.Println("id is",*(Params.ID))
	//var temp []models.Album
	var t models.AppVersion
	for rows.Next() {
		var id int64
		var downloadUrl string
		var force float64
		var number float64
		var msg string
		var client string
		var cover string

		err = rows.Scan(&id,&downloadUrl,&force,&number,&msg,&client,&cover)
		if err != nil{
			fmt.Println(err.Error())
		}

		t.ID = id
		t.DownloadURL = downloadUrl
		t.Force = force
		t.Number = number
		t.Msg = msg
		t.Client = client
		t.Cover = cover
		//orderList = append(orderList,&t)
	}

	//data
	response.Data = &t


	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
