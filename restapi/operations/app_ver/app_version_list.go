// Code generated by go-swagger; DO NOT EDIT.

package app_ver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_ "github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	"github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// AppVersionListHandlerFunc turns a function with the right signature into a app version list handler
type AppVersionListHandlerFunc func(AppVersionListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppVersionListHandlerFunc) Handle(params AppVersionListParams) middleware.Responder {
	return fn(params)
}

// AppVersionListHandler interface for that can handle valid app version list params
type AppVersionListHandler interface {
	Handle(AppVersionListParams) middleware.Responder
}

// NewAppVersionList creates a new http.Handler for the app version list operation
func NewAppVersionList(ctx *middleware.Context, handler AppVersionListHandler) *AppVersionList {
	return &AppVersionList{Context: ctx, Handler: handler}
}

/*AppVersionList swagger:route GET /appVersion/list AppVer appVersionList

获取专辑列表

获取专辑列表

*/
type AppVersionList struct {
	Context *middleware.Context
	Handler AppVersionListHandler
}

func (o *AppVersionList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppVersionListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok AppVersionListOK
	var response models.InlineResponse20038
	var albumList models.InlineResponse20038VersionList
	var count int64

	db, err := _var.OpenConnection()
	if err != nil {
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query
	db.Table("init").Where("status=?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex) * (*(Params.PageSize))).Find(&albumList)
	db.Table("init").Where("status=?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex) * (*(Params.PageSize))).Count(&count)
	//data
	response.VersionList = albumList
	//fmt.Println("size is",len(albumList))
	//fmt.Println("haspushed is",albumList[0].HasPushed)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200, "ok")))
	response.Status = &status
	response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
