// Code generated by go-swagger; DO NOT EDIT.

package feedback

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// FeedbackListHandlerFunc turns a function with the right signature into a feedback list handler
type FeedbackListHandlerFunc func(FeedbackListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FeedbackListHandlerFunc) Handle(params FeedbackListParams) middleware.Responder {
	return fn(params)
}

// FeedbackListHandler interface for that can handle valid feedback list params
type FeedbackListHandler interface {
	Handle(FeedbackListParams) middleware.Responder
}

// NewFeedbackList creates a new http.Handler for the feedback list operation
func NewFeedbackList(ctx *middleware.Context, handler FeedbackListHandler) *FeedbackList {
	return &FeedbackList{Context: ctx, Handler: handler}
}

/*FeedbackList swagger:route POST /feedback/list Feedback feedbackList

获取反馈列表

获取反馈列表

*/
type FeedbackList struct {
	Context *middleware.Context
	Handler FeedbackListHandler
}

func (o *FeedbackList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFeedbackListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok FeedbackListOK
	var response models.InlineResponse2004
	var feedbackList models.InlineResponse2004Chapters
	var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query
	db.Table("feedbacks").Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&feedbackList)
	db.Table("feedbacks").Count(&count)

	//data
	response.Chapters = feedbackList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status
	response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
