// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CategorySubUploadHandlerFunc turns a function with the right signature into a category sub upload handler
type CategorySubUploadHandlerFunc func(CategorySubUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CategorySubUploadHandlerFunc) Handle(params CategorySubUploadParams) middleware.Responder {
	return fn(params)
}

// CategorySubUploadHandler interface for that can handle valid category sub upload params
type CategorySubUploadHandler interface {
	Handle(CategorySubUploadParams) middleware.Responder
}

// NewCategorySubUpload creates a new http.Handler for the category sub upload operation
func NewCategorySubUpload(ctx *middleware.Context, handler CategorySubUploadHandler) *CategorySubUpload {
	return &CategorySubUpload{Context: ctx, Handler: handler}
}

/*CategorySubUpload swagger:route POST /category/sub/upload Category categorySubUpload

添加一个子类

*/
type CategorySubUpload struct {
	Context *middleware.Context
	Handler CategorySubUploadHandler
}

func (o *CategorySubUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCategorySubUploadParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
