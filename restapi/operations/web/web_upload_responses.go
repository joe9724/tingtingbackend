// Code generated by go-swagger; DO NOT EDIT.

package web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "tingtingbackend/models"
)

// WebUploadOKCode is the HTTP code returned for type WebUploadOK
const WebUploadOKCode int = 200

/*WebUploadOK 成功，返回成功信息

swagger:response webUploadOK
*/
type WebUploadOK struct {

	/*
	  In: Body
	*/
	Payload *models.InlineResponse200 `json:"body,omitempty"`
}

// NewWebUploadOK creates WebUploadOK with default headers values
func NewWebUploadOK() *WebUploadOK {
	return &WebUploadOK{}
}

// WithPayload adds the payload to the web upload o k response
func (o *WebUploadOK) WithPayload(payload *models.InlineResponse200) *WebUploadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the web upload o k response
func (o *WebUploadOK) SetPayload(payload *models.InlineResponse200) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebUploadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*WebUploadDefault error

swagger:response webUploadDefault
*/
type WebUploadDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewWebUploadDefault creates WebUploadDefault with default headers values
func NewWebUploadDefault(code int) *WebUploadDefault {
	if code <= 0 {
		code = 500
	}

	return &WebUploadDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the web upload default response
func (o *WebUploadDefault) WithStatusCode(code int) *WebUploadDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the web upload default response
func (o *WebUploadDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the web upload default response
func (o *WebUploadDefault) WithPayload(payload *models.Error) *WebUploadDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the web upload default response
func (o *WebUploadDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebUploadDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
