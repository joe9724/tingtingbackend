// Code generated by go-swagger; DO NOT EDIT.

package web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// WebListHandlerFunc turns a function with the right signature into a web list handler
type WebListHandlerFunc func(WebListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WebListHandlerFunc) Handle(params WebListParams) middleware.Responder {
	return fn(params)
}

// WebListHandler interface for that can handle valid web list params
type WebListHandler interface {
	Handle(WebListParams) middleware.Responder
}

// NewWebList creates a new http.Handler for the web list operation
func NewWebList(ctx *middleware.Context, handler WebListHandler) *WebList {
	return &WebList{Context: ctx, Handler: handler}
}

/*WebList swagger:route GET /web/list Web webList

列表

web列表

*/
type WebList struct {
	Context *middleware.Context
	Handler WebListHandler
}

func (o *WebList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWebListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok WebListOK
	var response models.InlineResponse2002513
	var webList models.InlineResponse2002513Webs
	//var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query
	//db.Where(map[string]interface{}{"status":0}).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&orderList)
	if Params.Webtype != nil{
		db.Raw("select id,content,url,title from web where webtype=?",*(Params.Webtype)).Find(&webList)
	}else{
		db.Raw("select id,content,url,title from web").Find(&webList)
	}

	/*rows, err := db.Raw("select orders.id,orders.order_no,orders.album_id,orders.member_id,orders.time,albums.name as albumname,albums.value,members.name as membername from orders left join albums on orders.album_id = albums.id left join members on orders.member_id=members.id").Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Rows()
	if err !=nil{
		fmt.Println("err is",err.Error())
	}*/
	//var temp []models.Album
	/*for rows.Next() {
		var id int64
		var order_no string
		var album_id int64
		var member_id int64
		var time int64
		var albumname string
		var value float64
		var membername string

		err = rows.Scan(&id,&order_no,&album_id,&member_id,&time,&albumname,&value,&membername)
		if err != nil{
			fmt.Println(err.Error())
		}

		var t models.Order
		t.MemberID = &member_id
		t.ID = &id
		t.Value = &value
		t.Time = &time
		t.OrderNo = &order_no
		t.AlbumName = &albumname
		t.MemberName = &membername
		t.AlbumID = &album_id
		orderList = append(orderList,&t)
	}
*/
	//db.Table("orders").Where(map[string]interface{}{"status":0}).Count(&count)
	//data
	response.Webs = webList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status
	response.Status.TotalCount = 3

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
