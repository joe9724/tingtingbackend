// Code generated by go-swagger; DO NOT EDIT.

package upload_file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"io/ioutil"
	"github.com/go-openapi/runtime/middleware"
	"fmt"
	_ "os"
	"runtime"
	"time"
	"strings"
	"tingtingbackend/models"
	"tingtingbackend/var"
	"strconv"
)

// FileUploadHandlerFunc turns a function with the right signature into a file upload handler
type FileUploadHandlerFunc func(FileUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FileUploadHandlerFunc) Handle(params FileUploadParams) middleware.Responder {
	return fn(params)
}

// FileUploadHandler interface for that can handle valid file upload params
type FileUploadHandler interface {
	Handle(FileUploadParams) middleware.Responder
}

// NewFileUpload creates a new http.Handler for the file upload operation
func NewFileUpload(ctx *middleware.Context, handler FileUploadHandler) *FileUpload {
	return &FileUpload{Context: ctx, Handler: handler}
}

/*FileUpload swagger:route POST /file/upload UploadFile fileUpload

上传文件

*/
type FileUpload struct {
	Context *middleware.Context
	Handler FileUploadHandler
}

func (o *FileUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFileUploadParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok FileUploadOK
	var response models.InlineResponse200191
	var status models.Response

	var msg string
	var code int64

	var filename string
	filename = strconv.FormatInt((time.Now().Unix()), 10)

	fmt.Println("filename is", filename)

	if (Params.Type == nil) {
		file, err := ioutil.ReadAll(Params.File)
		if err != nil {
			fmt.Println("err upload:", err.Error())
		}
		//fmt.Println(len(icon))
		// Always returns a valid content-type and "application/octet-stream" if no others seemed to match.
		contentType := http.DetectContentType(file)
		fmt.Println("contentType is", contentType)

		//save
		var lower string
		lower = strings.ToLower(contentType)
		if (strings.Contains(lower, "jp") || (strings.Contains(lower, "pn"))) {
			if (runtime.GOOS == "windows") {
				err1 := ioutil.WriteFile(filename+".jpg", file, 0644)
				if err1 != nil {
					fmt.Println(err1.Error())
				}
			} else {
				err1 := ioutil.WriteFile("/root/go/src/resource/image/icon/"+filename+".jpg", file, 0644)
				if err1 != nil {
					fmt.Println(err1.Error())
				}
			}
			response.URL = _var.GetResourceDomain("icon") + filename + ".jpg"
			code = 200
			msg = "ok"
		} else {
			code = 401
			msg = "image format need jpg or png"
		}
	} else {

		//如果有icon
		if (*Params.Type) == "icon" {
			file, err := ioutil.ReadAll(Params.File)
			if err != nil {
				fmt.Println("err upload:", err.Error())
			}
			//fmt.Println(len(icon))
			// Always returns a valid content-type and "application/octet-stream" if no others seemed to match.
			contentType := http.DetectContentType(file)
			fmt.Println("contentType is", contentType)

			//save
			var lower string
			lower = strings.ToLower(contentType)
			if (strings.Contains(lower, "jp") || (strings.Contains(lower, "pn"))) {
				if (runtime.GOOS == "windows") {
					err1 := ioutil.WriteFile(filename+".jpg", file, 0644)
					if err1 != nil {
						fmt.Println(err1.Error())
					}
				} else {
					err1 := ioutil.WriteFile("/root/go/src/resource/image/icon/"+filename+".jpg", file, 0644)
					if err1 != nil {
						fmt.Println(err1.Error())
					}
				}
				response.URL = _var.GetResourceDomain("icon") + filename + ".jpg"
				code = 200
				msg = "ok"
			} else {
				code = 401
				msg = "image format need jpg or png"
			}
		} else if (*Params.Type) == "cover" {
			file, err := ioutil.ReadAll(Params.File)
			if err != nil {
				fmt.Println("err upload:", err.Error())
			}
			//fmt.Println(len(icon))
			// Always returns a valid content-type and "application/octet-stream" if no others seemed to match.
			contentType := http.DetectContentType(file)
			//fmt.Println("contentType is", contentType)

			//save
			var lower string
			lower = strings.ToLower(contentType)
			if (strings.Contains(lower, "jp") || (strings.Contains(lower, "pn"))) {
				if (runtime.GOOS == "windows") {
					err1 := ioutil.WriteFile(filename+".jpg", file, 0644)
					if err1 != nil {
						fmt.Println(err1.Error())
					}
				} else {
					err1 := ioutil.WriteFile("/root/go/src/resource/image/cover/"+filename+".jpg", file, 0644)
					if err1 != nil {
						fmt.Println(err1.Error())
					}
				}
				code = 200
				msg = "ok"
				response.URL = _var.GetResourceDomain("cover") + filename + ".jpg"
			} else {
				code = 402
				msg = "image format need jpg or png "
			}

		} else if (*Params.Type) == "mp3" {
			file, err := ioutil.ReadAll(Params.File)
			if err != nil {
				fmt.Println("err upload:", err.Error())
			}
			//fmt.Println(len(icon))
			// Always returns a valid content-type and "application/octet-stream" if no others seemed to match.
			contentType := http.DetectContentType(file)
			//fmt.Println("contentType is", contentType)

			//save
			var lower string
			lower = strings.ToLower(contentType)
			if (strings.Contains(lower, "jp") || (strings.Contains(lower, "pn"))) {
				if (runtime.GOOS == "windows") {
					err1 := ioutil.WriteFile(filename+".jpg", file, 0644)
					if err1 != nil {
						fmt.Println(err1.Error())
					}
				} else {
					err1 := ioutil.WriteFile("/root/go/src/resource/image/cover/"+filename+".jpg", file, 0644)
					if err1 != nil {
						fmt.Println(err1.Error())
					}
				}
				code = 200
				msg = "ok"
				response.URL = _var.GetResourceDomain("cover") + filename + ".jpg"
			} else {
				code = 402
				msg = "image format need jpg or png "
			}

		}

	}
	db, err := _var.OpenConnection()
	if err != nil {
		fmt.Println(err.Error())
	}
	defer db.Close()

	status.UnmarshalBinary([]byte(_var.Response200(code, msg)))
	response.Return = &status

	ok.SetPayload(&response)
	o.Context.Respond(rw, r, route.Produces, route, ok)

}
