// Code generated by go-swagger; DO NOT EDIT.

package msg

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// MsgSendListHandlerFunc turns a function with the right signature into a msg send list handler
type MsgSendListHandlerFunc func(MsgSendListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MsgSendListHandlerFunc) Handle(params MsgSendListParams) middleware.Responder {
	return fn(params)
}

// MsgSendListHandler interface for that can handle valid msg send list params
type MsgSendListHandler interface {
	Handle(MsgSendListParams) middleware.Responder
}

// NewMsgSendList creates a new http.Handler for the msg send list operation
func NewMsgSendList(ctx *middleware.Context, handler MsgSendListHandler) *MsgSendList {
	return &MsgSendList{Context: ctx, Handler: handler}
}

/*MsgSendList swagger:route GET /msg/send/list Msg msgSendList

已发送消息列表

已发送消息列表

*/
type MsgSendList struct {
	Context *middleware.Context
	Handler MsgSendListHandler
}

func (o *MsgSendList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMsgSendListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok MsgSendListOK
	var response models.InlineResponse20011
	var msgList models.InlineResponse20011MsgList
	var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query
	//db.Table("recharge").Where(map[string]interface{}{"status":0}).Find(&rechargeList).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	db.Table("msgs").Where("status=?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&msgList)
	db.Table("msgs").Where("status=?",0).Count(&count)
	//data
	response.MsgList = msgList
	//fmt.Println("haspushed is",albumList[0].HasPushed)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status
	response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
