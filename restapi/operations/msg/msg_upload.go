// Code generated by go-swagger; DO NOT EDIT.

package msg

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"io/ioutil"
	middleware "github.com/go-openapi/runtime/middleware"
	"fmt"
	_"os"
	_"runtime"
	_"strings"
	"tingtingbackend/models"
	"tingtingbackend/var"
	"time"
)

// MsgUploadHandlerFunc turns a function with the right signature into a msg upload handler
type MsgUploadHandlerFunc func(MsgUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MsgUploadHandlerFunc) Handle(params MsgUploadParams) middleware.Responder {
	return fn(params)
}

// MsgUploadHandler interface for that can handle valid msg upload params
type MsgUploadHandler interface {
	Handle(MsgUploadParams) middleware.Responder
}

// NewMsgUpload creates a new http.Handler for the msg upload operation
func NewMsgUpload(ctx *middleware.Context, handler MsgUploadHandler) *MsgUpload {
	return &MsgUpload{Context: ctx, Handler: handler}
}

/*MsgUpload swagger:route POST /msg/upload Msg msgUpload

添加一个消息

*/
type MsgUpload struct {
	Context *middleware.Context
	Handler MsgUploadHandler
}

func (o *MsgUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMsgUploadParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok MsgUploadOK
	var response models.InlineResponse200
	var status models.Response
	//var category models.Category
	var msg string
	var code int64
	msg = "ok"
	code = 200

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	/*if(Params.IconUrl != ""){
		fmt.Println(Params.IconUrl)
		category.Icon = &(Params.IconUrl)
	}*/

	//tt:= int64(-1)
	//fmt.Println("Params.CategoryId=",*(Params.CategoryId))
	if(*(Params.Action) == "add"){ //新建
		fmt.Println("new")
		db.Exec("insert into msgs(title,sub_title,create_time) values (?,?,?)", Params.Title, Params.SubTitle, time.Now().UnixNano() / 1000000000)
	}else if (*(Params.Action) == "edit"){ //更新
		fmt.Println("edit")
		db.Exec("update msgs set title=?,sub_title=?,create_time=? where id=?", Params.Title, Params.SubTitle, time.Now().UnixNano() / 1000000000,*(Params.ID))
	}else if(*(Params.Action) == "delete") { //删除
		fmt.Println("delete")
		db.Exec("update msgs set status=1  where id=?", *(Params.ID))
	}
	status.UnmarshalBinary([]byte(_var.Response200(code,msg)))
	response.Status = &status
	ok.SetPayload(&response)
	o.Context.Respond(rw, r, route.Produces, route, ok)

}
