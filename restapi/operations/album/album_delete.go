// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
	"strconv"
)

// AlbumDeleteHandlerFunc turns a function with the right signature into a album delete handler
type AlbumDeleteHandlerFunc func(AlbumDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AlbumDeleteHandlerFunc) Handle(params AlbumDeleteParams) middleware.Responder {
	return fn(params)
}

// AlbumDeleteHandler interface for that can handle valid album delete params
type AlbumDeleteHandler interface {
	Handle(AlbumDeleteParams) middleware.Responder
}

// NewAlbumDelete creates a new http.Handler for the album delete operation
func NewAlbumDelete(ctx *middleware.Context, handler AlbumDeleteHandler) *AlbumDelete {
	return &AlbumDelete{Context: ctx, Handler: handler}
}

/*AlbumDelete swagger:route GET /album/delete Album albumDelete

删除专辑

删除专辑

*/
type AlbumDelete struct {
	Context *middleware.Context
	Handler AlbumDeleteHandler
}

func (o *AlbumDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAlbumDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok AlbumDeleteOK
	var response models.InlineResponse20018

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}

	fmt.Println("iconid is",*(Params.AlbumID))
	var bid int64
	bid,er := strconv.ParseInt(*(Params.AlbumID), 10, 64)
	if er !=nil{

	}
	db.Exec("update albums set status=1 where id=?",bid)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
