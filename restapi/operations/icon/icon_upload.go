// Code generated by go-swagger; DO NOT EDIT.

package icon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	middleware "github.com/go-openapi/runtime/middleware"
	"fmt"
	_"os"
	"tingtingbackend/models"
	"tingtingbackend/var"
)

// IconUploadHandlerFunc turns a function with the right signature into a icon upload handler
type IconUploadHandlerFunc func(IconUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IconUploadHandlerFunc) Handle(params IconUploadParams) middleware.Responder {
	return fn(params)
}

// IconUploadHandler interface for that can handle valid icon upload params
type IconUploadHandler interface {
	Handle(IconUploadParams) middleware.Responder
}

// NewIconUpload creates a new http.Handler for the icon upload operation
func NewIconUpload(ctx *middleware.Context, handler IconUploadHandler) *IconUpload {
	return &IconUpload{Context: ctx, Handler: handler}
}

/*IconUpload swagger:route POST /icon/upload Icon iconUpload

添加一个icon

*/
type IconUpload struct {
	Context *middleware.Context
	Handler IconUploadHandler
}

func (o *IconUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIconUploadParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok IconUploadOK
	var response models.InlineResponse2002
	var status models.Response
	var icon models.Icon
	var msg string
	var code int64

	msg = "ok"
	code = 200

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	if(Params.CoverUrl != ""){
		fmt.Println(Params.CoverUrl)
		icon.Cover = Params.CoverUrl
	}

	//tt:= int64(-1)
	fmt.Println("Params.Name is",Params.Name)
	fmt.Println("*(Params.Status) is",*(Params.Status))
	fmt.Println("*(Params.Type)",*(Params.Type))
	fmt.Println("*(Params.TargetID) is",*(Params.TargetID))
	fmt.Println("Params.WebURL is",Params.WebURL)
	fmt.Println("Params.CoverUrl is",Params.CoverUrl)

	if(*(Params.IconID) == -1){ //新建


		db.Exec("insert into icons(name,status,type,jumpid,weburl,cover) values(?,?,?,?,?,?)",Params.Name,*(Params.Status),*(Params.Type),*(Params.TargetID),Params.WebURL,Params.CoverUrl)
		//book.User_id = *(Params.MemberID)
		//db.Table("banners").Create(&banner)
	}else{ //更新
		//fmt.Println("edit")
		//db.Table("sub_book_items").Where("id=?",*(Params.BookId)).Last(&book)
		if(Params.CoverUrl != ""){
			db.Exec("update icons set name=?,status=?,type=?,cover=?,jumpid=?,weburl=? where id=?",Params.Name,*(Params.Status),*(Params.Type),Params.CoverUrl,*(Params.TargetID),Params.WebURL,*(Params.IconID))
		}else{
			db.Exec("update icons set name=?,status=?,type=?,jumpid=?,weburl=? where id=?",Params.Name,*(Params.Status),*(Params.Type),*(Params.TargetID),Params.WebURL,*(Params.IconID))
		}

	}

	status.UnmarshalBinary([]byte(_var.Response200(code,msg)))
	response.Status = &status
	ok.SetPayload(&response)
	o.Context.Respond(rw, r, route.Produces, route, ok)

}
