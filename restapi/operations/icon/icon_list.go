// Code generated by go-swagger; DO NOT EDIT.

package icon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_ "github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	"github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// IconListHandlerFunc turns a function with the right signature into a icon list handler
type IconListHandlerFunc func(IconListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IconListHandlerFunc) Handle(params IconListParams) middleware.Responder {
	return fn(params)
}

// IconListHandler interface for that can handle valid icon list params
type IconListHandler interface {
	Handle(IconListParams) middleware.Responder
}

// NewIconList creates a new http.Handler for the icon list operation
func NewIconList(ctx *middleware.Context, handler IconListHandler) *IconList {
	return &IconList{Context: ctx, Handler: handler}
}

/*IconList swagger:route GET /icon/list Icon iconList

列表

er列表

*/
type IconList struct {
	Context *middleware.Context
	Handler IconListHandler
}

func (o *IconList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIconListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok IconListOK
	var response models.InlineResponse20091
	var albumList models.InlineResponse200Icons
	var count int64

	db, err := _var.OpenConnection()
	if err != nil {
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query
	//db.Table("icons").Where("status=?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex) * (*(Params.PageSize))).Find(&albumList)
	//db.Table("icons").Where("status=?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex) * (*(Params.PageSize))).Count(&count)
	if Params.Keyword !=nil && Params.CategoryID!=nil{
		if(*Params.Keyword == " ") {
			db.Raw("select id,name  FROM icons where status=0 and  id not in (select iconId from category_icon_relation  where categoryId = ? )", *(Params.CategoryID)).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&albumList)
			db.Raw("select id,name  FROM icons where  id not in (select iconId from category_icon_relation  where categoryId = ? )", *(Params.CategoryID)).Count(&count)
		}else{
			db.Raw("select id,name  FROM icons where status=0 and name like '%" + *(Params.Keyword)+"%' and id not in (select iconId from category_icon_relation  where categoryId = ? )", *(Params.CategoryID)).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&albumList)
			db.Raw("select id,name  FROM icons where status=0 and name like '%" + *(Params.Keyword)+"%' and id not in (select iconId from category_icon_relation  where categoryId = ? )", *(Params.CategoryID)).Count(&count)
		}
		//db.Table("books").Select("books.id, books.name").Joins("left join album_book_relation on books.id = album_book_relation.bookId").Where("books.id is null").Find(&bookList)
		fmt.Println("1")
		//db.Where(map[string]interface{}{"status":0}).Where("name like ?","%"+*(Params.Keyword)+"%").Not("id",).Find(&bookList).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	}else{
		if Params.CategoryID !=nil{
			fmt.Println("2")
			db.Table("icons").Select("icons.id, icons.name").Joins("left join category_icon_relation on icons.id = category_icon_relation.iconId").Where("category_icon_relation.categoryId =?",*Params.CategoryID).Where("icons.status=?",0).Count(&count)
			db.Table("icons").Select("icons.id, icons.name").Joins("left join category_icon_relation on icons.id = category_icon_relation.iconId").Where("category_icon_relation.categoryId =?",*Params.CategoryID).Where("icons.status=?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&albumList)
		}else{
			fmt.Println("3")
			db.Table("icons").Where(map[string]interface{}{"status":0}).Count(&count)
			db.Table("icons").Where(map[string]interface{}{"status":0}).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&albumList)
		}

	}
	//data
	response.Icons = albumList
	//fmt.Println("size is",len(albumList))
	//fmt.Println("haspushed is",albumList[0].HasPushed)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200, "ok")))
	response.Status = &status
	response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
