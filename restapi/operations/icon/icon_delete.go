// Code generated by go-swagger; DO NOT EDIT.

package icon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
	"strconv"
)

// IconDeleteHandlerFunc turns a function with the right signature into a icon delete handler
type IconDeleteHandlerFunc func(IconDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IconDeleteHandlerFunc) Handle(params IconDeleteParams) middleware.Responder {
	return fn(params)
}

// IconDeleteHandler interface for that can handle valid icon delete params
type IconDeleteHandler interface {
	Handle(IconDeleteParams) middleware.Responder
}

// NewIconDelete creates a new http.Handler for the icon delete operation
func NewIconDelete(ctx *middleware.Context, handler IconDeleteHandler) *IconDelete {
	return &IconDelete{Context: ctx, Handler: handler}
}

/*IconDelete swagger:route GET /icon/delete Icon iconDelete

删除

删除

*/
type IconDelete struct {
	Context *middleware.Context
	Handler IconDeleteHandler
}

func (o *IconDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIconDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok IconDeleteOK
	var response models.InlineResponse2003

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}

	fmt.Println("iconid is",*(Params.IconID))
	var bid int64
	bid,er := strconv.ParseInt(*(Params.IconID), 10, 64)
	if er !=nil{

	}
	db.Exec("update icons set status=1 where id=?",bid)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
