// Code generated by go-swagger; DO NOT EDIT.

package icon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// IconDetailHandlerFunc turns a function with the right signature into a icon detail handler
type IconDetailHandlerFunc func(IconDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IconDetailHandlerFunc) Handle(params IconDetailParams) middleware.Responder {
	return fn(params)
}

// IconDetailHandler interface for that can handle valid icon detail params
type IconDetailHandler interface {
	Handle(IconDetailParams) middleware.Responder
}

// NewIconDetail creates a new http.Handler for the icon detail operation
func NewIconDetail(ctx *middleware.Context, handler IconDetailHandler) *IconDetail {
	return &IconDetail{Context: ctx, Handler: handler}
}

/*IconDetail swagger:route GET /icon/detail Icon iconDetail

r详情

详情

*/
type IconDetail struct {
	Context *middleware.Context
	Handler IconDetailHandler
}

func (o *IconDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIconDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
