// Code generated by go-swagger; DO NOT EDIT.

package chapter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ChapterHistoryListHandlerFunc turns a function with the right signature into a chapter history list handler
type ChapterHistoryListHandlerFunc func(ChapterHistoryListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ChapterHistoryListHandlerFunc) Handle(params ChapterHistoryListParams) middleware.Responder {
	return fn(params)
}

// ChapterHistoryListHandler interface for that can handle valid chapter history list params
type ChapterHistoryListHandler interface {
	Handle(ChapterHistoryListParams) middleware.Responder
}

// NewChapterHistoryList creates a new http.Handler for the chapter history list operation
func NewChapterHistoryList(ctx *middleware.Context, handler ChapterHistoryListHandler) *ChapterHistoryList {
	return &ChapterHistoryList{Context: ctx, Handler: handler}
}

/*ChapterHistoryList swagger:route GET /chapter/history/list Chapter chapterHistoryList

用户浏览过的历史章节

用户浏览过的历史章节

*/
type ChapterHistoryList struct {
	Context *middleware.Context
	Handler ChapterHistoryListHandler
}

func (o *ChapterHistoryList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewChapterHistoryListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
