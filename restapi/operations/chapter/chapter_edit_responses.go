// Code generated by go-swagger; DO NOT EDIT.

package chapter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/tingtingbackend/models"
)

// ChapterEditOKCode is the HTTP code returned for type ChapterEditOK
const ChapterEditOKCode int = 200

/*ChapterEditOK 上传成功，返回成功信息

swagger:response chapterEditOK
*/
type ChapterEditOK struct {

	/*
	  In: Body
	*/
	Payload *models.InlineResponse20015 `json:"body,omitempty"`
}

// NewChapterEditOK creates ChapterEditOK with default headers values
func NewChapterEditOK() *ChapterEditOK {
	return &ChapterEditOK{}
}

// WithPayload adds the payload to the chapter edit o k response
func (o *ChapterEditOK) WithPayload(payload *models.InlineResponse20015) *ChapterEditOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the chapter edit o k response
func (o *ChapterEditOK) SetPayload(payload *models.InlineResponse20015) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChapterEditOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ChapterEditDefault error

swagger:response chapterEditDefault
*/
type ChapterEditDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewChapterEditDefault creates ChapterEditDefault with default headers values
func NewChapterEditDefault(code int) *ChapterEditDefault {
	if code <= 0 {
		code = 500
	}

	return &ChapterEditDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the chapter edit default response
func (o *ChapterEditDefault) WithStatusCode(code int) *ChapterEditDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the chapter edit default response
func (o *ChapterEditDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the chapter edit default response
func (o *ChapterEditDefault) WithPayload(payload *models.Error) *ChapterEditDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the chapter edit default response
func (o *ChapterEditDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChapterEditDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
