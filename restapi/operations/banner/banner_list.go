// Code generated by go-swagger; DO NOT EDIT.

package banner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_ "github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	"github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// BannerListHandlerFunc turns a function with the right signature into a banner list handler
type BannerListHandlerFunc func(BannerListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BannerListHandlerFunc) Handle(params BannerListParams) middleware.Responder {
	return fn(params)
}

// BannerListHandler interface for that can handle valid banner list params
type BannerListHandler interface {
	Handle(BannerListParams) middleware.Responder
}

// NewBannerList creates a new http.Handler for the banner list operation
func NewBannerList(ctx *middleware.Context, handler BannerListHandler) *BannerList {
	return &BannerList{Context: ctx, Handler: handler}
}

/*BannerList swagger:route GET /banner/list Banner bannerList

Banner列表

Banner列表

*/
type BannerList struct {
	Context *middleware.Context
	Handler BannerListHandler
}

func (o *BannerList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBannerListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok BannerListOK
	var response models.InlineResponse2009
	var bannerList models.InlineResponse2009Banners
	var count int64

	db, err := _var.OpenConnection()
	if err != nil {
		fmt.Println(err.Error())
	}
	//query
    //db.Table("banners").Where("status=?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex) * (*(Params.PageSize))).Find(&albumList)
	//db.Table("banners").Where("status=?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex) * (*(Params.PageSize))).Count(&count)
	if Params.Keyword !=nil && Params.CategoryID!=nil{
		if(*Params.Keyword == " ") {
			db.Raw("select id,name  FROM banners where  id not in (select bannerId from category_banner_relation  where categoryId = ? )", *(Params.CategoryID)).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&bannerList)
			db.Raw("select id,name  FROM banners where  id not in (select bannerId from category_banner_relation  where categoryId = ? )", *(Params.CategoryID)).Count(&count)
		}else{
			db.Raw("select id,name  FROM banners where name like '%" + *(Params.Keyword)+"%' and id not in (select bannerId from category_banner_relation  where categoryId = ? )", *(Params.CategoryID)).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&bannerList)
			db.Raw("select id,name  FROM banners where name like '%" + *(Params.Keyword)+"%' and id not in (select bannerId from category_banner_relation  where categoryId = ? )", *(Params.CategoryID)).Count(&count)
		}
		//db.Table("books").Select("books.id, books.name").Joins("left join album_book_relation on books.id = album_book_relation.bookId").Where("books.id is null").Find(&bookList)
		fmt.Println("1")
		//db.Where(map[string]interface{}{"status":0}).Where("name like ?","%"+*(Params.Keyword)+"%").Not("id",).Find(&bookList).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	}else{
		if Params.CategoryID !=nil{
			fmt.Println("2")
			db.Table("banners").Select("banners.id, banners.name").Joins("left join category_banner_relation on banners.id = category_banner_relation.bannerId").Where("category_banner_relation.categoryId =?",*Params.CategoryID).Count(&count)
			db.Table("banners").Select("banners.id, banners.name").Joins("left join category_banner_relation on banners.id = category_banner_relation.bannerId").Where("category_banner_relation.categoryId =?",*Params.CategoryID).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&bannerList)
		}else{
			fmt.Println("3")
			db.Table("banners").Where(map[string]interface{}{"status":0}).Count(&count)
			db.Table("banners").Where(map[string]interface{}{"status":0}).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&bannerList)
		}

	}
	//data
	response.Banners = bannerList
	//fmt.Println("size is",len(albumList))
	//fmt.Println("haspushed is",albumList[0].HasPushed)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200, "ok")))
	response.Status = &status
	response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
