// Code generated by go-swagger; DO NOT EDIT.

package banner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
	"strconv"
)

// BannerDeleteHandlerFunc turns a function with the right signature into a banner delete handler
type BannerDeleteHandlerFunc func(BannerDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BannerDeleteHandlerFunc) Handle(params BannerDeleteParams) middleware.Responder {
	return fn(params)
}

// BannerDeleteHandler interface for that can handle valid banner delete params
type BannerDeleteHandler interface {
	Handle(BannerDeleteParams) middleware.Responder
}

// NewBannerDelete creates a new http.Handler for the banner delete operation
func NewBannerDelete(ctx *middleware.Context, handler BannerDeleteHandler) *BannerDelete {
	return &BannerDelete{Context: ctx, Handler: handler}
}

/*BannerDelete swagger:route GET /banner/delete Banner bannerDelete

删除

删除

*/
type BannerDelete struct {
	Context *middleware.Context
	Handler BannerDeleteHandler
}

func (o *BannerDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBannerDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok BannerDeleteOK
	var response models.InlineResponse2003

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//query
	//var banner models.Banner

	//db.Table("banners").Select("id,cover,type,name,jumpid,jumpurl,test").Where("id=?",Params.BannerID).Last(&banner)
	//db.Table("banners").Where("id=?",Params.BannerID).First(&banner)
	//fmt.Println("banner is",banner)
	//response.Data = &banner
	fmt.Println("bannerid is",*(Params.BannerID))
	var bid int64
	bid,er := strconv.ParseInt(*(Params.BannerID), 10, 64)
	if er !=nil{

	}
    db.Exec("update banners set status=1 where id=?",bid)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
