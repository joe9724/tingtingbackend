// Code generated by go-swagger; DO NOT EDIT.

package banner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BannerUploadHandlerFunc turns a function with the right signature into a banner upload handler
type BannerUploadHandlerFunc func(BannerUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BannerUploadHandlerFunc) Handle(params BannerUploadParams) middleware.Responder {
	return fn(params)
}

// BannerUploadHandler interface for that can handle valid banner upload params
type BannerUploadHandler interface {
	Handle(BannerUploadParams) middleware.Responder
}

// NewBannerUpload creates a new http.Handler for the banner upload operation
func NewBannerUpload(ctx *middleware.Context, handler BannerUploadHandler) *BannerUpload {
	return &BannerUpload{Context: ctx, Handler: handler}
}

/*BannerUpload swagger:route POST /banner/upload Banner bannerUpload

添加一个banner

*/
type BannerUpload struct {
	Context *middleware.Context
	Handler BannerUploadHandler
}

func (o *BannerUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBannerUploadParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
