// Code generated by go-swagger; DO NOT EDIT.

package jpush

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
	"github.com/ylywyn/jpush-api-go-client"
	"github.com/fatih/structs"
)
const (
	appKey = "a67c24d6c05f16fe2b96112e"
	secret = "858c1e130a1be0040f81badd"
)
// PushJpushHandlerFunc turns a function with the right signature into a push jpush handler
type PushJpushHandlerFunc func(PushJpushParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PushJpushHandlerFunc) Handle(params PushJpushParams) middleware.Responder {
	return fn(params)
}

// PushJpushHandler interface for that can handle valid push jpush params
type PushJpushHandler interface {
	Handle(PushJpushParams) middleware.Responder
}

// NewPushJpush creates a new http.Handler for the push jpush operation
func NewPushJpush(ctx *middleware.Context, handler PushJpushHandler) *PushJpush {
	return &PushJpush{Context: ctx, Handler: handler}
}

type ExtraInfo struct{
	ID *int64 `json:"id"`
	Type *int64 `json:"type"`
    Content *string `json:"content"`
    //
}

/*PushJpush swagger:route GET /push/jpush Jpush pushJpush

推送

推送

*/
type PushJpush struct {
	Context *middleware.Context
	Handler PushJpushHandler
}

func (o *PushJpush) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPushJpushParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	//Platform
	var pf jpushclient.Platform
	pf.Add(jpushclient.ANDROID)
	pf.Add(jpushclient.IOS)
	//pf.Add(jpushclient.WINPHONE)
	//pf.All()

	//Audience
	/*var ad jpushclient.Audience
	s := []string{"1", "2", "3"}
	ad.SetTag(s)
	ad.SetAlias(s)
	ad.SetID(s)*/
	//ad.All()

	//Notice
	var notice jpushclient.Notice
	fmt.Println("title is",Params.Title)
	notice.SetAlert(Params.Title)

	var extra ExtraInfo
	extra.ID = Params.ID
	extra.Content = &Params.Title
	extra.Type = Params.Type

	notice.SetAndroidNotice(&jpushclient.AndroidNotice{Alert: Params.Title,Title:Params.Title,Extras:structs.Map(extra)})
	notice.SetIOSNotice(&jpushclient.IOSNotice{Alert: Params.Title,Extras:structs.Map(extra)})
	//notice.SetWinPhoneNotice(&jpushclient.WinPhoneNotice{Alert: "WinPhoneNotice"})

	//{"content":"xxxx", "type":0, "id":1234}
	/*var msg jpushclient.Message
	msg.Title = "Hello"
	msg.Content = "你是ylywn"*/

	payload := jpushclient.NewPushPayLoad()
	payload.SetPlatform(&pf)

	var ad jpushclient.Audience
	//s := []string{"t1", "t2", "t3"}
	//ad.SetTag(s)
	ad.All()

	payload.SetAudience(&ad)
	//payload.SetMessage(&msg)
	payload.SetNotice(&notice)

	bytes, _ := payload.ToBytes()
	fmt.Printf("%s\r\n", string(bytes))

	//push
	c := jpushclient.NewPushClient(secret, appKey)
	str, err := c.Send(bytes)
	if err != nil {
		fmt.Printf("err:%s", err.Error())
	} else {
		fmt.Printf("ok:%s", str)
	}

	//
	var ok PushJpushOK
	var response models.InlineResponse20014

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//query
	//var book models.Book
	//db.Table("albums").Where("id=?",Params.BookID).First(&book)
    if(*(Params.Type) == 0){  //新版本
		db.Raw("update init set has_pushed=1 where id=?",Params.ID)
	}else if(*(Params.Type) == 1){  //消息
		db.Raw("update msgs set has_pushed=1 where id=?",Params.ID)
	}else if(*(Params.Type) == 2){  //专辑
		db.Raw("update albums set has_pushed=1 where id=?",Params.ID)
	}

	//data
	//response.Data = &book


	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
