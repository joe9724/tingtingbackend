// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrUserLoginHandlerFunc turns a function with the right signature into a user login handler
type NrUserLoginHandlerFunc func(NrUserLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrUserLoginHandlerFunc) Handle(params NrUserLoginParams) middleware.Responder {
	return fn(params)
}

// NrUserLoginHandler interface for that can handle valid user login params
type NrUserLoginHandler interface {
	Handle(NrUserLoginParams) middleware.Responder
}

// NewNrUserLogin creates a new http.Handler for the user login operation
func NewNrUserLogin(ctx *middleware.Context, handler NrUserLoginHandler) *NrUserLogin {
	return &NrUserLogin{Context: ctx, Handler: handler}
}

/*NrUserLogin swagger:route GET /user/login User userLogin

登录接口

登录接口

*/
type NrUserLogin struct {
	Context *middleware.Context
	Handler NrUserLoginHandler
}

func (o *NrUserLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrUserLoginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	// res := o.Handler.Handle(Params) // actually handle the request
	var result UserLoginOK


	o.Context.Respond(rw, r, route.Produces, route, result)

}
