// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// NrUserListHandlerFunc turns a function with the right signature into a user list handler
type NrUserListHandlerFunc func(NrUserListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrUserListHandlerFunc) Handle(params NrUserListParams) middleware.Responder {
	return fn(params)
}

// NrUserListHandler interface for that can handle valid user list params
type NrUserListHandler interface {
	Handle(NrUserListParams) middleware.Responder
}

// NewNrUserList creates a new http.Handler for the user list operation
func NewNrUserList(ctx *middleware.Context, handler NrUserListHandler) *NrUserList {
	return &NrUserList{Context: ctx, Handler: handler}
}

/*NrUserList swagger:route GET /user/list User userList

获取后台用户列表

获取后台用户列表

*/
type NrUserList struct {
	Context *middleware.Context
	Handler NrUserListHandler
}

func (o *NrUserList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrUserListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok UserListOK
	var response models.InlineResponse20030
	var userlist models.InlineResponse20030Users

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query
	db.Where(map[string]interface{}{"status":0}).Find(&userlist).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	//data
	response.Users = userlist

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
