// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrUserEditPassHandlerFunc turns a function with the right signature into a user edit pass handler
type NrUserEditPassHandlerFunc func(NrUserEditPassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrUserEditPassHandlerFunc) Handle(params NrUserEditPassParams) middleware.Responder {
	return fn(params)
}

// NrUserEditPassHandler interface for that can handle valid user edit pass params
type NrUserEditPassHandler interface {
	Handle(NrUserEditPassParams) middleware.Responder
}

// NewNrUserEditPass creates a new http.Handler for the user edit pass operation
func NewNrUserEditPass(ctx *middleware.Context, handler NrUserEditPassHandler) *NrUserEditPass {
	return &NrUserEditPass{Context: ctx, Handler: handler}
}

/*NrUserEditPass swagger:route GET /user/editPass User userEditPass

修改密码接口

修改密码接口

*/
type NrUserEditPass struct {
	Context *middleware.Context
	Handler NrUserEditPassHandler
}

func (o *NrUserEditPass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrUserEditPassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
