// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewNrUserEditPassParams creates a new NrUserEditPassParams object
// with the default values initialized.
func NewNrUserEditPassParams() NrUserEditPassParams {
	var ()
	return NrUserEditPassParams{}
}

// NrUserEditPassParams contains all the bound params for the user edit pass operation
// typically these are obtained from a http.Request
//
// swagger:parameters /user/editPass
type NrUserEditPassParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*新密码
	  In: query
	*/
	NewPassword *string
	/*老密码
	  In: query
	*/
	OldPassword *string
	/*当前登录用户id
	  In: query
	*/
	Userid *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *NrUserEditPassParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qNewPassword, qhkNewPassword, _ := qs.GetOK("newPassword")
	if err := o.bindNewPassword(qNewPassword, qhkNewPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	qOldPassword, qhkOldPassword, _ := qs.GetOK("oldPassword")
	if err := o.bindOldPassword(qOldPassword, qhkOldPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserid, qhkUserid, _ := qs.GetOK("userid")
	if err := o.bindUserid(qUserid, qhkUserid, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NrUserEditPassParams) bindNewPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.NewPassword = &raw

	return nil
}

func (o *NrUserEditPassParams) bindOldPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.OldPassword = &raw

	return nil
}

func (o *NrUserEditPassParams) bindUserid(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("userid", "query", "int64", raw)
	}
	o.Userid = &value

	return nil
}
