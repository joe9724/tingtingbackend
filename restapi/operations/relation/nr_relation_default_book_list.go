// Code generated by go-swagger; DO NOT EDIT.

package relation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// NrRelationDefaultBookListHandlerFunc turns a function with the right signature into a relation default book list handler
type NrRelationDefaultBookListHandlerFunc func(NrRelationDefaultBookListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrRelationDefaultBookListHandlerFunc) Handle(params NrRelationDefaultBookListParams) middleware.Responder {
	return fn(params)
}

// NrRelationDefaultBookListHandler interface for that can handle valid relation default book list params
type NrRelationDefaultBookListHandler interface {
	Handle(NrRelationDefaultBookListParams) middleware.Responder
}

// NewNrRelationDefaultBookList creates a new http.Handler for the relation default book list operation
func NewNrRelationDefaultBookList(ctx *middleware.Context, handler NrRelationDefaultBookListHandler) *NrRelationDefaultBookList {
	return &NrRelationDefaultBookList{Context: ctx, Handler: handler}
}

/*NrRelationDefaultBookList swagger:route GET /relation/default/book/list Relation relationDefaultBookList

获取专辑下书本集合

获取专辑下书本集合

*/
type NrRelationDefaultBookList struct {
	Context *middleware.Context
	Handler NrRelationDefaultBookListHandler
}

func (o *NrRelationDefaultBookList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrRelationDefaultBookListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok RelationDefaultBookListOK
	var response models.InlineResponse20030513
	var bookList models.InlineResponse20030Books
	var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//query
	//db.Table("books").Select("books.id, books.name,books.grade,book_default_grade_relation.startTime,book_default_grade_relation.endTime,book_default_grade_relation.bookId").Joins("left join book_default_grade_relation on books.id = book_default_grade_relation.bookId").Where("book_default_grade_relation.status =?",0).Count(&count)
	//db.Table("books").Select("books.id, books.name,books.grade,book_default_grade_relation.startTime,book_default_grade_relation.endTime,book_default_grade_relation.bookId").Joins("left join book_default_grade_relation on books.id = book_default_grade_relation.bookId").Where("book_default_grade_relation.status =?",0).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&bookList)
	//data

	//var temp []interface{}
	//db.Raw("select books.id, books.name,books.grade,book_default_grade_relation.startTime,book_default_grade_relation.endTime,book_default_grade_relation.bookId from books left join book_default_grade_relation on books.id = book_default_grade_relation.bookId").Limit(*(Params.PageSize)).Offset(*(Params.PageIndex) * (*(Params.PageSize))).Find(&temp)
    //fmt.Println(temp)

	//db.Raw("select books.id, books.name,books.grade,book_default_grade_relation.startTime,book_default_grade_relation.endTime,book_default_grade_relation.bookId,book_default_grade_relation.status from books left join book_default_grade_relation on books.id = book_default_grade_relation.bookId").Limit(*(Params.PageSize)).Offset(*(Params.PageIndex) * (*(Params.PageSize))).Find(&bookList)

	db.Raw("select count(id) from book_default_grade_relation where book_default_grade_relation.status=0").Count(&count)

	rows, err := db.Raw("select book_default_grade_relation.id,books.name,book_default_grade_relation.grade,book_default_grade_relation.startTime as start_time,book_default_grade_relation.endTime,book_default_grade_relation.bookId,book_default_grade_relation.status from books join book_default_grade_relation on books.id=book_default_grade_relation.bookId where book_default_grade_relation.status=0 order by grade,(startTime+1)").Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Rows()
	if err !=nil{
		fmt.Println("err is",err.Error())
	}
	//var temp []models.Album
	for rows.Next() {
		var name string
		var bookId int64
		var status int64
		var start_time string
		var endTime string
		var grade int64
		var id int64

		err = rows.Scan(&id,&name,&grade,&start_time,&endTime,&bookId,&status)
		if err != nil{
			fmt.Println(err.Error())
		}

		var t models.SuggestedBook
		t.Id = id
		t.BookId = bookId
		t.Name = name
		t.Status = status
		t.StartTime = start_time
		t.EndTime = endTime
		t.Grade = grade
		bookList = append(bookList,&t)
	}


	response.Books = bookList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status
	response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
