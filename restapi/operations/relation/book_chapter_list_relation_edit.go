// Code generated by go-swagger; DO NOT EDIT.

package relation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BookChapterListRelationEditHandlerFunc turns a function with the right signature into a book chapter list relation edit handler
type BookChapterListRelationEditHandlerFunc func(BookChapterListRelationEditParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BookChapterListRelationEditHandlerFunc) Handle(params BookChapterListRelationEditParams) middleware.Responder {
	return fn(params)
}

// BookChapterListRelationEditHandler interface for that can handle valid book chapter list relation edit params
type BookChapterListRelationEditHandler interface {
	Handle(BookChapterListRelationEditParams) middleware.Responder
}

// NewBookChapterListRelationEdit creates a new http.Handler for the book chapter list relation edit operation
func NewBookChapterListRelationEdit(ctx *middleware.Context, handler BookChapterListRelationEditHandler) *BookChapterListRelationEdit {
	return &BookChapterListRelationEdit{Context: ctx, Handler: handler}
}

/*BookChapterListRelationEdit swagger:route POST /relation/book/chapterList/edit Relation bookChapterListRelationEdit

编辑书的章节集合

编辑书的章节集合

*/
type BookChapterListRelationEdit struct {
	Context *middleware.Context
	Handler BookChapterListRelationEditHandler
}

func (o *BookChapterListRelationEdit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBookChapterListRelationEditParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
