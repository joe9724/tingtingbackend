// Code generated by go-swagger; DO NOT EDIT.

package relation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
	"strings"
	"strconv"
)

// NrRelationSubCategoryAlbumListEditHandlerFunc turns a function with the right signature into a relation sub category album list edit handler
type NrRelationSubCategoryAlbumListEditHandlerFunc func(NrRelationSubCategoryAlbumListEditParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrRelationSubCategoryAlbumListEditHandlerFunc) Handle(params NrRelationSubCategoryAlbumListEditParams) middleware.Responder {
	return fn(params)
}

// NrRelationSubCategoryAlbumListEditHandler interface for that can handle valid relation sub category album list edit params
type NrRelationSubCategoryAlbumListEditHandler interface {
	Handle(NrRelationSubCategoryAlbumListEditParams) middleware.Responder
}

// NewNrRelationSubCategoryAlbumListEdit creates a new http.Handler for the relation sub category album list edit operation
func NewNrRelationSubCategoryAlbumListEdit(ctx *middleware.Context, handler NrRelationSubCategoryAlbumListEditHandler) *NrRelationSubCategoryAlbumListEdit {
	return &NrRelationSubCategoryAlbumListEdit{Context: ctx, Handler: handler}
}

/*NrRelationSubCategoryAlbumListEdit swagger:route POST /relation/subCategory/albumList/edit Relation relationSubCategoryAlbumListEdit

编辑子类下的专辑集合

编辑子类下的专辑集合

*/
type NrRelationSubCategoryAlbumListEdit struct {
	Context *middleware.Context
	Handler NrRelationSubCategoryAlbumListEditHandler
}

func (o *NrRelationSubCategoryAlbumListEdit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrRelationSubCategoryAlbumListEditParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok RelationSubCategoryAlbumListEditOK
	var response models.InlineResponse20018


	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}

	defer db.Close()

	chapters := *(Params.Body.AlbumIds)

	if (*(Params.Body.ActionCode) == 0){ //添加映射
		//先解析出bookis集合,样式 1,2,3,4,
		if (!strings.Contains(chapters,",")){
			db.Exec("insert into category_album_relation(categoryId,albumId) values(?,?)",Params.Body.BookID,chapters)
			//调整category下album个数
			db.Exec("update sub_category_items set albums_number=albums_number+1 where id=?",Params.Body.BookID)
			fmt.Println("1")

		}else{
			temp := strings.Split(chapters,",")
			for k:=0;k< len(temp);k++ {
				db.Exec("insert into category_album_relation(categoryId,albumId) values(?,?)",Params.Body.BookID,temp[k])
				//fmt.Println("insert into category_album_relation(bookId,chapterId) values(?,?)",Params.Body.BookID,temp[k])
			}
			db.Exec("update sub_category_items set albums_number=albums_number+"+strconv.Itoa(len(temp))+" where id="+strconv.FormatInt(*(Params.Body.BookID),10))
			fmt.Println("2")
		}
	}else{ //去除映射
		db.Exec("delete from category_album_relation where categoryId=? and albumId=?",Params.Body.BookID,chapters)
		db.Exec("update sub_category_items set albums_number=albums_number-1 where id=?",Params.Body.BookID)
		fmt.Println("3")
	}

	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
