// Code generated by go-swagger; DO NOT EDIT.

package relation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_ "github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	"github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
	"strings"
)

// NrRelationBookTaglistEditHandlerFunc turns a function with the right signature into a relation book taglist edit handler
type NrRelationBookTaglistEditHandlerFunc func(NrRelationBookTaglistEditParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrRelationBookTaglistEditHandlerFunc) Handle(params NrRelationBookTaglistEditParams) middleware.Responder {
	return fn(params)
}

// NrRelationBookTaglistEditHandler interface for that can handle valid relation book taglist edit params
type NrRelationBookTaglistEditHandler interface {
	Handle(NrRelationBookTaglistEditParams) middleware.Responder
}

// NewNrRelationBookTaglistEdit creates a new http.Handler for the relation book taglist edit operation
func NewNrRelationBookTaglistEdit(ctx *middleware.Context, handler NrRelationBookTaglistEditHandler) *NrRelationBookTaglistEdit {
	return &NrRelationBookTaglistEdit{Context: ctx, Handler: handler}
}

/*NrRelationBookTaglistEdit swagger:route POST /relation/book/taglist/edit Relation relationBookTaglistEdit

编辑专辑下的书本集合

编辑专辑下的书本集合

*/
type NrRelationBookTaglistEdit struct {
	Context *middleware.Context
	Handler NrRelationBookTaglistEditHandler
}

func (o *NrRelationBookTaglistEdit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrRelationBookTaglistEditParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok RelationBookTaglistEditOK
	var response models.InlineResponse20014

	db, err := _var.OpenConnection()
	if err != nil {
		fmt.Println(err.Error())
	}

	books := *(Params.Body.BookIds)

	if (*(Params.Body.ActionCode) == 0) { //添加映射
		fmt.Println("add")
		//先解析出bookis集合,样式 1,2,3,4,
		if (!strings.Contains(books, ",")) {
			db.Exec("insert into tag_book_relation(bookId,tagId) values(?,?)", Params.Body.BookID, books)
		} else {
			temp := strings.Split(books, ",")
			for k := 0; k < len(temp); k++ {
				db.Exec("insert into tag_book_relation(bookId,tagId) values(?,?)", Params.Body.BookID, temp[k])
				fmt.Println("insert into tag_book_relation(bookId,tagId) values(?,?)", Params.Body.BookID, temp[k])
			}
		}
	} else if (*(Params.Body.ActionCode) == 1) { //去除映射
		fmt.Println("remove")
		db.Exec("delete from tag_book_relation where bookId=? and tagId=?", Params.Body.BookID, books)
	} else if (*(Params.Body.ActionCode) == 2) { //添加分类下banner映射
		fmt.Println("add")
		//先解析出bookis集合,样式 1,2,3,4,
		if (!strings.Contains(books, ",")) {
			db.Exec("insert into category_banner_relation(categoryId,bannerId) values(?,?)", Params.Body.BookID, books)
		} else {
			temp := strings.Split(books, ",")
			for k := 0; k < len(temp); k++ {
				db.Exec("insert into category_banner_relation(categoryId,bannerId) values(?,?)", Params.Body.BookID, temp[k])
				fmt.Println("insert into category_banner_relation(categoryId,bannerId) values(?,?)", Params.Body.BookID, temp[k])
			}
		}
	} else if (*(Params.Body.ActionCode) == 3) { //去除分类下banner映射
		fmt.Println("remove")
		db.Exec("delete from category_banner_relation where categoryId=? and bannerId=?", Params.Body.BookID, books)
	} else if (*(Params.Body.ActionCode) == 4) { //添加分类下icon映射
		fmt.Println("add")
		//先解析出bookis集合,样式 1,2,3,4,
		if (!strings.Contains(books, ",")) {
			db.Exec("insert into category_icon_relation(categoryId,iconId) values(?,?)", Params.Body.BookID, books)
		} else {
			temp := strings.Split(books, ",")
			for k := 0; k < len(temp); k++ {
				db.Exec("insert into category_icon_relation(categoryId,iconId) values(?,?)", Params.Body.BookID, temp[k])
				fmt.Println("insert into category_icon_relation(categoryId,iconId) values(?,?)", Params.Body.BookID, temp[k])
			}
		}
	} else if (*(Params.Body.ActionCode) == 5) { //去除分类下icon映射
		fmt.Println("remove")
		db.Exec("delete from category_icon_relation where categoryId=? and iconId=?", Params.Body.BookID, books)
	} else if (*(Params.Body.ActionCode) == 6) { //重新排序
        fmt.Println("reorder","update category_banner_relation set order=? where id=?",*(Params.Body.NewOrder),*(Params.Body.OriginID),"update category_banner_relation set order=? where id=?",*(Params.Body.OriginOrder),*(Params.Body.NewID))
	    db.Exec("update category_banner_relation set `order`=? where id=?",*(Params.Body.NewOrder),*(Params.Body.OriginID))
		db.Exec("update category_banner_relation set `order`=? where id=?",*(Params.Body.OriginOrder),*(Params.Body.NewID))

	}

	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200, "ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
