// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// OrderListHandlerFunc turns a function with the right signature into a order list handler
type OrderListHandlerFunc func(OrderListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OrderListHandlerFunc) Handle(params OrderListParams) middleware.Responder {
	return fn(params)
}

// OrderListHandler interface for that can handle valid order list params
type OrderListHandler interface {
	Handle(OrderListParams) middleware.Responder
}

// NewOrderList creates a new http.Handler for the order list operation
func NewOrderList(ctx *middleware.Context, handler OrderListHandler) *OrderList {
	return &OrderList{Context: ctx, Handler: handler}
}

/*OrderList swagger:route POST /order/list Order orderList

获取订单列表(含条件检索)

获取订单列表

*/
type OrderList struct {
	Context *middleware.Context
	Handler OrderListHandler
}

func (o *OrderList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOrderListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok OrderListOK
	var response models.InlineResponse2003
	var orderList models.InlineResponse2003Orders
	var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query
	//db.Where(map[string]interface{}{"status":0}).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&orderList)
	rows, err := db.Raw("select orders.id,orders.order_no,orders.album_id,orders.member_id,orders.time,albums.name as albumname,albums.value,members.name as membername from orders left join albums on orders.album_id = albums.id left join members on orders.member_id=members.id").Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Rows()
	if err !=nil{
		fmt.Println("err is",err.Error())
	}
	//var temp []models.Album
	for rows.Next() {
		var id int64
		var order_no string
		var album_id int64
		var member_id int64
		var time int64
		var albumname string
		var value float64
		var membername string

		err = rows.Scan(&id,&order_no,&album_id,&member_id,&time,&albumname,&value,&membername)
		if err != nil{
			fmt.Println(err.Error())
		}

		var t models.Order
        t.MemberID = &member_id
        t.ID = &id
        t.Value = &value
        t.Time = &time
        t.OrderNo = &order_no
        t.AlbumName = &albumname
        t.MemberName = &membername
        t.AlbumID = &album_id
		orderList = append(orderList,&t)
	}

	db.Table("orders").Where(map[string]interface{}{"status":0}).Count(&count)
	//data
	response.Orders = orderList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status
	response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
