// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// NrMemberRecordListHandlerFunc turns a function with the right signature into a member record list handler
type NrMemberRecordListHandlerFunc func(NrMemberRecordListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrMemberRecordListHandlerFunc) Handle(params NrMemberRecordListParams) middleware.Responder {
	return fn(params)
}

// NrMemberRecordListHandler interface for that can handle valid member record list params
type NrMemberRecordListHandler interface {
	Handle(NrMemberRecordListParams) middleware.Responder
}

// NewNrMemberRecordList creates a new http.Handler for the member record list operation
func NewNrMemberRecordList(ctx *middleware.Context, handler NrMemberRecordListHandler) *NrMemberRecordList {
	return &NrMemberRecordList{Context: ctx, Handler: handler}
}

/*NrMemberRecordList swagger:route GET /member/record/list Member memberRecordList

录音列表

录音列表

*/
type NrMemberRecordList struct {
	Context *middleware.Context
	Handler NrMemberRecordListHandler
}

func (o *NrMemberRecordList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrMemberRecordListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok MemberRecordListOK
	var response models.InlineResponse20013
	var recordList models.InlineResponse20013RecordList
	var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query

	db.Raw("select records.id,records.title,records.time,records.url,members.name from records left join members on records.user_id=members.id").Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&recordList)
	db.Raw("select id  from records ").Count(&count)
	fmt.Println("count is",count)
	//data
	response.RecordList = recordList

	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status
	response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
