// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"tingtingbackend/restapi/operations/album"
	"tingtingbackend/restapi/operations/banner"
	"tingtingbackend/restapi/operations/book"
	"tingtingbackend/restapi/operations/category"
	"tingtingbackend/restapi/operations/chapter"
	"tingtingbackend/restapi/operations/feedback"
	"tingtingbackend/restapi/operations/member"
	"tingtingbackend/restapi/operations/msg"
	"tingtingbackend/restapi/operations/order"
	"tingtingbackend/restapi/operations/relation"
	"tingtingbackend/restapi/operations/report_err"
	"tingtingbackend/restapi/operations/user"
	"tingtingbackend/restapi/operations/recharge"
	"tingtingbackend/restapi/operations/upload_file"
)

// NewTingtingBackendAPI creates a new TingtingBackend instance
func NewTingtingBackendAPI(spec *loads.Document) *TingtingBackendAPI {
	return &TingtingBackendAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		RelationNrCategorySubCategoryListRelationHandler: relation.NrCategorySubCategoryListRelationHandlerFunc(func(params relation.NrCategorySubCategoryListRelationParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationNrCategorySubCategoryListRelation has not yet been implemented")
		}),
		RelationNrAlbumBookListRelationHandler: relation.NrAlbumBookListRelationHandlerFunc(func(params relation.NrAlbumBookListRelationParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationNrAlbumBookListRelation has not yet been implemented")
		}),
		CategoryNrCategoryListHandler: category.NrCategoryListHandlerFunc(func(params category.NrCategoryListParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryNrCategoryList has not yet been implemented")
		}),
		MemberNrMemberRecordListHandler: member.NrMemberRecordListHandlerFunc(func(params member.NrMemberRecordListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberRecordList has not yet been implemented")
		}),
		RelationNrRelationCategorySubCategoryListEditHandler: relation.NrRelationCategorySubCategoryListEditHandlerFunc(func(params relation.NrRelationCategorySubCategoryListEditParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationNrRelationCategorySubCategoryListEdit has not yet been implemented")
		}),
		RechargeNrRechargeDetailHandler: recharge.NrRechargeDetailHandlerFunc(func(params recharge.NrRechargeDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation RechargeNrRechargeDetail has not yet been implemented")
		}),
		RelationNrRelationAlbumBooklistEditHandler: relation.NrRelationAlbumBooklistEditHandlerFunc(func(params relation.NrRelationAlbumBooklistEditParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationNrRelationAlbumBooklistEdit has not yet been implemented")
		}),
		RelationNrRelationSubCategoryAlbumListEditHandler: relation.NrRelationSubCategoryAlbumListEditHandlerFunc(func(params relation.NrRelationSubCategoryAlbumListEditParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationNrRelationSubCategoryAlbumListEdit has not yet been implemented")
		}),
		RelationNrSubCategoryAlbumListRelationHandler: relation.NrSubCategoryAlbumListRelationHandlerFunc(func(params relation.NrSubCategoryAlbumListRelationParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationNrSubCategoryAlbumListRelation has not yet been implemented")
		}),
		UserNrUserDeleteHandler: user.NrUserDeleteHandlerFunc(func(params user.NrUserDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserDelete has not yet been implemented")
		}),
		UserNrUserEditPassHandler: user.NrUserEditPassHandlerFunc(func(params user.NrUserEditPassParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserEditPass has not yet been implemented")
		}),
		UserNrUserListHandler: user.NrUserListHandlerFunc(func(params user.NrUserListParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserList has not yet been implemented")
		}),
		UserNrUserLoginHandler: user.NrUserLoginHandlerFunc(func(params user.NrUserLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserLogin has not yet been implemented")
		}),
		AlbumAlbumDeleteHandler: album.AlbumDeleteHandlerFunc(func(params album.AlbumDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumDelete has not yet been implemented")
		}),
		AlbumAlbumDetailHandler: album.AlbumDetailHandlerFunc(func(params album.AlbumDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumDetail has not yet been implemented")
		}),
		AlbumAlbumEditHandler: album.AlbumEditHandlerFunc(func(params album.AlbumEditParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumEdit has not yet been implemented")
		}),
		AlbumAlbumListHandler: album.AlbumListHandlerFunc(func(params album.AlbumListParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumList has not yet been implemented")
		}),
		AlbumAlbumUploadHandler: album.AlbumUploadHandlerFunc(func(params album.AlbumUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation AlbumAlbumUpload has not yet been implemented")
		}),
		BannerBannerDetailHandler: banner.BannerDetailHandlerFunc(func(params banner.BannerDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation BannerBannerDetail has not yet been implemented")
		}),
		BannerBannerListHandler: banner.BannerListHandlerFunc(func(params banner.BannerListParams) middleware.Responder {
			return middleware.NotImplemented("operation BannerBannerList has not yet been implemented")
		}),
		RelationBookChapterListRelationHandler: relation.BookChapterListRelationHandlerFunc(func(params relation.BookChapterListRelationParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationBookChapterListRelation has not yet been implemented")
		}),
		RelationBookChapterListRelationEditHandler: relation.BookChapterListRelationEditHandlerFunc(func(params relation.BookChapterListRelationEditParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationBookChapterListRelationEdit has not yet been implemented")
		}),
		BookBookDeleteHandler: book.BookDeleteHandlerFunc(func(params book.BookDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookDelete has not yet been implemented")
		}),
		BookBookDetailHandler: book.BookDetailHandlerFunc(func(params book.BookDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookDetail has not yet been implemented")
		}),
		BookBookEditHandler: book.BookEditHandlerFunc(func(params book.BookEditParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookEdit has not yet been implemented")
		}),
		BookBookListHandler: book.BookListHandlerFunc(func(params book.BookListParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookList has not yet been implemented")
		}),
		BookBookUploadHandler: book.BookUploadHandlerFunc(func(params book.BookUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation BookBookUpload has not yet been implemented")
		}),
		CategoryCategoryDeleteHandler: category.CategoryDeleteHandlerFunc(func(params category.CategoryDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryCategoryDelete has not yet been implemented")
		}),
		CategoryCategoryDetailHandler: category.CategoryDetailHandlerFunc(func(params category.CategoryDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryCategoryDetail has not yet been implemented")
		}),
		CategoryCategoryEditHandler: category.CategoryEditHandlerFunc(func(params category.CategoryEditParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryCategoryEdit has not yet been implemented")
		}),
		CategoryCategorySubEditHandler: category.CategorySubEditHandlerFunc(func(params category.CategorySubEditParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryCategorySubEdit has not yet been implemented")
		}),
		CategoryCategorySubUploadHandler: category.CategorySubUploadHandlerFunc(func(params category.CategorySubUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryCategorySubUpload has not yet been implemented")
		}),
		CategoryCategoryUploadHandler: category.CategoryUploadHandlerFunc(func(params category.CategoryUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryCategoryUpload has not yet been implemented")
		}),
		ChapterChapterDeleteHandler: chapter.ChapterDeleteHandlerFunc(func(params chapter.ChapterDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterDelete has not yet been implemented")
		}),
		ChapterChapterDetailHandler: chapter.ChapterDetailHandlerFunc(func(params chapter.ChapterDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterDetail has not yet been implemented")
		}),
		ChapterChapterEditHandler: chapter.ChapterEditHandlerFunc(func(params chapter.ChapterEditParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterEdit has not yet been implemented")
		}),
		ChapterChapterFavListHandler: chapter.ChapterFavListHandlerFunc(func(params chapter.ChapterFavListParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterFavList has not yet been implemented")
		}),
		ChapterChapterHistoryListHandler: chapter.ChapterHistoryListHandlerFunc(func(params chapter.ChapterHistoryListParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterHistoryList has not yet been implemented")
		}),
		ChapterChapterListHandler: chapter.ChapterListHandlerFunc(func(params chapter.ChapterListParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterList has not yet been implemented")
		}),
		ChapterChapterUploadHandler: chapter.ChapterUploadHandlerFunc(func(params chapter.ChapterUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation ChapterChapterUpload has not yet been implemented")
		}),
		FeedbackFeedbackDetailHandler: feedback.FeedbackDetailHandlerFunc(func(params feedback.FeedbackDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation FeedbackFeedbackDetail has not yet been implemented")
		}),
		FeedbackFeedbackListHandler: feedback.FeedbackListHandlerFunc(func(params feedback.FeedbackListParams) middleware.Responder {
			return middleware.NotImplemented("operation FeedbackFeedbackList has not yet been implemented")
		}),
		UploadFileFileUploadHandler: upload_file.FileUploadHandlerFunc(func(params upload_file.FileUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation UploadFileFileUpload has not yet been implemented")
		}),
		MemberMemberDetailHandler: member.MemberDetailHandlerFunc(func(params member.MemberDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMemberDetail has not yet been implemented")
		}),
		MemberMemberListHandler: member.MemberListHandlerFunc(func(params member.MemberListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMemberList has not yet been implemented")
		}),
		MemberMemberRecordDetailHandler: member.MemberRecordDetailHandlerFunc(func(params member.MemberRecordDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMemberRecordDetail has not yet been implemented")
		}),
		MsgMsgDetailHandler: msg.MsgDetailHandlerFunc(func(params msg.MsgDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation MsgMsgDetail has not yet been implemented")
		}),
		MsgMsgSendListHandler: msg.MsgSendListHandlerFunc(func(params msg.MsgSendListParams) middleware.Responder {
			return middleware.NotImplemented("operation MsgMsgSendList has not yet been implemented")
		}),
		MsgMsgUnsendListHandler: msg.MsgUnsendListHandlerFunc(func(params msg.MsgUnsendListParams) middleware.Responder {
			return middleware.NotImplemented("operation MsgMsgUnsendList has not yet been implemented")
		}),
		OrderOrderDetailHandler: order.OrderDetailHandlerFunc(func(params order.OrderDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation OrderOrderDetail has not yet been implemented")
		}),
		OrderOrderListHandler: order.OrderListHandlerFunc(func(params order.OrderListParams) middleware.Responder {
			return middleware.NotImplemented("operation OrderOrderList has not yet been implemented")
		}),
		ReportErrReportErrDetailHandler: report_err.ReportErrDetailHandlerFunc(func(params report_err.ReportErrDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportErrReportErrDetail has not yet been implemented")
		}),
		ReportErrReportErrListHandler: report_err.ReportErrListHandlerFunc(func(params report_err.ReportErrListParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportErrReportErrList has not yet been implemented")
		}),
		UserSearchHandler: user.SearchHandlerFunc(func(params user.SearchParams) middleware.Responder {
			return middleware.NotImplemented("operation UserSearch has not yet been implemented")
		}),
		RechargeRechargeListHandler: recharge.RechargeListHandlerFunc(func(params recharge.RechargeListParams) middleware.Responder {
			return middleware.NotImplemented("operation RechargeRechargeList has not yet been implemented")
		}),
	}
}

/*TingtingBackendAPI Tingting(Backend) */
type TingtingBackendAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// RelationNrCategorySubCategoryListRelationHandler sets the operation handler for the category sub category list relation operation
	RelationNrCategorySubCategoryListRelationHandler relation.NrCategorySubCategoryListRelationHandler
	// RelationNrAlbumBookListRelationHandler sets the operation handler for the album book list relation operation
	RelationNrAlbumBookListRelationHandler relation.NrAlbumBookListRelationHandler
	// CategoryNrCategoryListHandler sets the operation handler for the category list operation
	CategoryNrCategoryListHandler category.NrCategoryListHandler
	// MemberNrMemberRecordListHandler sets the operation handler for the member record list operation
	MemberNrMemberRecordListHandler member.NrMemberRecordListHandler
	// RechargeNrRechargeDetailHandler sets the operation handler for the recharge detail operation
	RechargeNrRechargeDetailHandler recharge.NrRechargeDetailHandler
	// RelationNrRelationCategorySubCategoryListEditHandler sets the operation handler for the relation category sub category list edit operation
	RelationNrRelationCategorySubCategoryListEditHandler relation.NrRelationCategorySubCategoryListEditHandler
	// RelationNrRelationAlbumBooklistEditHandler sets the operation handler for the relation album booklist edit operation
	RelationNrRelationAlbumBooklistEditHandler relation.NrRelationAlbumBooklistEditHandler
	// RelationNrRelationSubCategoryAlbumListEditHandler sets the operation handler for the relation sub category album list edit operation
	RelationNrRelationSubCategoryAlbumListEditHandler relation.NrRelationSubCategoryAlbumListEditHandler
	// RelationNrSubCategoryAlbumListRelationHandler sets the operation handler for the sub category album list relation operation
	RelationNrSubCategoryAlbumListRelationHandler relation.NrSubCategoryAlbumListRelationHandler
	// UserNrUserDeleteHandler sets the operation handler for the user delete operation
	UserNrUserDeleteHandler user.NrUserDeleteHandler
	// UserNrUserEditPassHandler sets the operation handler for the user edit pass operation
	UserNrUserEditPassHandler user.NrUserEditPassHandler
	// UserNrUserListHandler sets the operation handler for the user list operation
	UserNrUserListHandler user.NrUserListHandler
	// UserNrUserLoginHandler sets the operation handler for the user login operation
	UserNrUserLoginHandler user.NrUserLoginHandler
	// AlbumAlbumDeleteHandler sets the operation handler for the album delete operation
	AlbumAlbumDeleteHandler album.AlbumDeleteHandler
	// AlbumAlbumDetailHandler sets the operation handler for the album detail operation
	AlbumAlbumDetailHandler album.AlbumDetailHandler
	// AlbumAlbumEditHandler sets the operation handler for the album edit operation
	AlbumAlbumEditHandler album.AlbumEditHandler
	// AlbumAlbumListHandler sets the operation handler for the album list operation
	AlbumAlbumListHandler album.AlbumListHandler
	// AlbumAlbumUploadHandler sets the operation handler for the album upload operation
	AlbumAlbumUploadHandler album.AlbumUploadHandler
	// BannerBannerDetailHandler sets the operation handler for the banner detail operation
	BannerBannerDetailHandler banner.BannerDetailHandler
	// BannerBannerListHandler sets the operation handler for the banner list operation
	BannerBannerListHandler banner.BannerListHandler
	// RelationBookChapterListRelationHandler sets the operation handler for the book chapter list relation operation
	RelationBookChapterListRelationHandler relation.BookChapterListRelationHandler
	// RelationBookChapterListRelationEditHandler sets the operation handler for the book chapter list relation edit operation
	RelationBookChapterListRelationEditHandler relation.BookChapterListRelationEditHandler
	// BookBookDeleteHandler sets the operation handler for the book delete operation
	BookBookDeleteHandler book.BookDeleteHandler
	// BookBookDetailHandler sets the operation handler for the book detail operation
	BookBookDetailHandler book.BookDetailHandler
	// BookBookEditHandler sets the operation handler for the book edit operation
	BookBookEditHandler book.BookEditHandler
	// BookBookListHandler sets the operation handler for the book list operation
	BookBookListHandler book.BookListHandler
	// BookBookUploadHandler sets the operation handler for the book upload operation
	BookBookUploadHandler book.BookUploadHandler
	// CategoryCategoryDeleteHandler sets the operation handler for the category delete operation
	CategoryCategoryDeleteHandler category.CategoryDeleteHandler
	// CategoryCategoryDetailHandler sets the operation handler for the category detail operation
	CategoryCategoryDetailHandler category.CategoryDetailHandler
	// CategoryCategoryEditHandler sets the operation handler for the category edit operation
	CategoryCategoryEditHandler category.CategoryEditHandler
	// CategoryCategorySubEditHandler sets the operation handler for the category sub edit operation
	CategoryCategorySubEditHandler category.CategorySubEditHandler
	// CategoryCategorySubUploadHandler sets the operation handler for the category sub upload operation
	CategoryCategorySubUploadHandler category.CategorySubUploadHandler
	// CategoryCategoryUploadHandler sets the operation handler for the category upload operation
	CategoryCategoryUploadHandler category.CategoryUploadHandler
	// ChapterChapterDeleteHandler sets the operation handler for the chapter delete operation
	ChapterChapterDeleteHandler chapter.ChapterDeleteHandler
	// ChapterChapterDetailHandler sets the operation handler for the chapter detail operation
	ChapterChapterDetailHandler chapter.ChapterDetailHandler
	// ChapterChapterEditHandler sets the operation handler for the chapter edit operation
	ChapterChapterEditHandler chapter.ChapterEditHandler
	// ChapterChapterFavListHandler sets the operation handler for the chapter fav list operation
	ChapterChapterFavListHandler chapter.ChapterFavListHandler
	// ChapterChapterHistoryListHandler sets the operation handler for the chapter history list operation
	ChapterChapterHistoryListHandler chapter.ChapterHistoryListHandler
	// ChapterChapterListHandler sets the operation handler for the chapter list operation
	ChapterChapterListHandler chapter.ChapterListHandler
	// ChapterChapterUploadHandler sets the operation handler for the chapter upload operation
	ChapterChapterUploadHandler chapter.ChapterUploadHandler
	// FeedbackFeedbackDetailHandler sets the operation handler for the feedback detail operation
	FeedbackFeedbackDetailHandler feedback.FeedbackDetailHandler
	// FeedbackFeedbackListHandler sets the operation handler for the feedback list operation
	FeedbackFeedbackListHandler feedback.FeedbackListHandler
	// MemberMemberDetailHandler sets the operation handler for the member detail operation
	MemberMemberDetailHandler member.MemberDetailHandler
	// MemberMemberListHandler sets the operation handler for the member list operation
	MemberMemberListHandler member.MemberListHandler
	UploadFileFileUploadHandler upload_file.FileUploadHandler
	// MemberMemberRecordDetailHandler sets the operation handler for the member record detail operation
	MemberMemberRecordDetailHandler member.MemberRecordDetailHandler
	// MsgMsgDetailHandler sets the operation handler for the msg detail operation
	MsgMsgDetailHandler msg.MsgDetailHandler
	// MsgMsgSendListHandler sets the operation handler for the msg send list operation
	MsgMsgSendListHandler msg.MsgSendListHandler
	// MsgMsgUnsendListHandler sets the operation handler for the msg unsend list operation
	MsgMsgUnsendListHandler msg.MsgUnsendListHandler
	// OrderOrderDetailHandler sets the operation handler for the order detail operation
	OrderOrderDetailHandler order.OrderDetailHandler
	// OrderOrderListHandler sets the operation handler for the order list operation
	OrderOrderListHandler order.OrderListHandler
	// ReportErrReportErrDetailHandler sets the operation handler for the report err detail operation
	ReportErrReportErrDetailHandler report_err.ReportErrDetailHandler
	// ReportErrReportErrListHandler sets the operation handler for the report err list operation
	ReportErrReportErrListHandler report_err.ReportErrListHandler
	// UserSearchHandler sets the operation handler for the search operation
	UserSearchHandler user.SearchHandler
	// RechargeRechargeListHandler sets the operation handler for the recharge list operation
	RechargeRechargeListHandler recharge.RechargeListHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *TingtingBackendAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TingtingBackendAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TingtingBackendAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TingtingBackendAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TingtingBackendAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TingtingBackendAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TingtingBackendAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TingtingBackendAPI
func (o *TingtingBackendAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.RelationNrCategorySubCategoryListRelationHandler == nil {
		unregistered = append(unregistered, "relation.NrCategorySubCategoryListRelationHandler")
	}

	if o.RelationNrAlbumBookListRelationHandler == nil {
		unregistered = append(unregistered, "relation.NrAlbumBookListRelationHandler")
	}

	if o.CategoryNrCategoryListHandler == nil {
		unregistered = append(unregistered, "category.NrCategoryListHandler")
	}

	if o.MemberNrMemberRecordListHandler == nil {
		unregistered = append(unregistered, "member.NrMemberRecordListHandler")
	}

	if o.RechargeRechargeListHandler == nil {
		unregistered = append(unregistered, "recharge.RechargeListHandler")
	}

	if o.RechargeNrRechargeDetailHandler == nil {
		unregistered = append(unregistered, "recharge.NrRechargeDetailHandler")
	}

	if o.RelationNrRelationCategorySubCategoryListEditHandler == nil {
		unregistered = append(unregistered, "relation.NrRelationCategorySubCategoryListEditHandler")
	}

	if o.RelationNrRelationAlbumBooklistEditHandler == nil {
		unregistered = append(unregistered, "relation.NrRelationAlbumBooklistEditHandler")
	}

	if o.RelationNrRelationSubCategoryAlbumListEditHandler == nil {
		unregistered = append(unregistered, "relation.NrRelationSubCategoryAlbumListEditHandler")
	}

	if o.RelationNrSubCategoryAlbumListRelationHandler == nil {
		unregistered = append(unregistered, "relation.NrSubCategoryAlbumListRelationHandler")
	}

	if o.UserNrUserDeleteHandler == nil {
		unregistered = append(unregistered, "user.NrUserDeleteHandler")
	}

	if o.UserNrUserEditPassHandler == nil {
		unregistered = append(unregistered, "user.NrUserEditPassHandler")
	}

	if o.UserNrUserListHandler == nil {
		unregistered = append(unregistered, "user.NrUserListHandler")
	}

	if o.UserNrUserLoginHandler == nil {
		unregistered = append(unregistered, "user.NrUserLoginHandler")
	}

	if o.AlbumAlbumDeleteHandler == nil {
		unregistered = append(unregistered, "album.AlbumDeleteHandler")
	}

	if o.AlbumAlbumDetailHandler == nil {
		unregistered = append(unregistered, "album.AlbumDetailHandler")
	}

	if o.AlbumAlbumEditHandler == nil {
		unregistered = append(unregistered, "album.AlbumEditHandler")
	}

	if o.AlbumAlbumListHandler == nil {
		unregistered = append(unregistered, "album.AlbumListHandler")
	}

	if o.AlbumAlbumUploadHandler == nil {
		unregistered = append(unregistered, "album.AlbumUploadHandler")
	}

	if o.BannerBannerDetailHandler == nil {
		unregistered = append(unregistered, "banner.BannerDetailHandler")
	}

	if o.BannerBannerListHandler == nil {
		unregistered = append(unregistered, "banner.BannerListHandler")
	}

	if o.RelationBookChapterListRelationHandler == nil {
		unregistered = append(unregistered, "relation.BookChapterListRelationHandler")
	}

	if o.RelationBookChapterListRelationEditHandler == nil {
		unregistered = append(unregistered, "relation.BookChapterListRelationEditHandler")
	}

	if o.BookBookDeleteHandler == nil {
		unregistered = append(unregistered, "book.BookDeleteHandler")
	}

	if o.BookBookDetailHandler == nil {
		unregistered = append(unregistered, "book.BookDetailHandler")
	}

	if o.BookBookEditHandler == nil {
		unregistered = append(unregistered, "book.BookEditHandler")
	}

	if o.BookBookListHandler == nil {
		unregistered = append(unregistered, "book.BookListHandler")
	}

	if o.BookBookUploadHandler == nil {
		unregistered = append(unregistered, "book.BookUploadHandler")
	}

	if o.CategoryCategoryDeleteHandler == nil {
		unregistered = append(unregistered, "category.CategoryDeleteHandler")
	}

	if o.CategoryCategoryDetailHandler == nil {
		unregistered = append(unregistered, "category.CategoryDetailHandler")
	}

	if o.CategoryCategoryEditHandler == nil {
		unregistered = append(unregistered, "category.CategoryEditHandler")
	}

	if o.CategoryCategorySubEditHandler == nil {
		unregistered = append(unregistered, "category.CategorySubEditHandler")
	}

	if o.CategoryCategorySubUploadHandler == nil {
		unregistered = append(unregistered, "category.CategorySubUploadHandler")
	}

	if o.CategoryCategoryUploadHandler == nil {
		unregistered = append(unregistered, "category.CategoryUploadHandler")
	}

	if o.ChapterChapterDeleteHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterDeleteHandler")
	}

	if o.ChapterChapterDetailHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterDetailHandler")
	}

	if o.ChapterChapterEditHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterEditHandler")
	}

	if o.ChapterChapterFavListHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterFavListHandler")
	}

	if o.ChapterChapterHistoryListHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterHistoryListHandler")
	}

	if o.ChapterChapterListHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterListHandler")
	}

	if o.ChapterChapterUploadHandler == nil {
		unregistered = append(unregistered, "chapter.ChapterUploadHandler")
	}

	if o.FeedbackFeedbackDetailHandler == nil {
		unregistered = append(unregistered, "feedback.FeedbackDetailHandler")
	}

	if o.FeedbackFeedbackListHandler == nil {
		unregistered = append(unregistered, "feedback.FeedbackListHandler")
	}

	if o.MemberMemberDetailHandler == nil {
		unregistered = append(unregistered, "member.MemberDetailHandler")
	}

	if o.MemberMemberListHandler == nil {
		unregistered = append(unregistered, "member.MemberListHandler")
	}

	if o.MemberMemberRecordDetailHandler == nil {
		unregistered = append(unregistered, "member.MemberRecordDetailHandler")
	}

	if o.MsgMsgDetailHandler == nil {
		unregistered = append(unregistered, "msg.MsgDetailHandler")
	}

	if o.UploadFileFileUploadHandler == nil {
		unregistered = append(unregistered, "upload_file.FileUploadHandler")
	}

	if o.MsgMsgSendListHandler == nil {
		unregistered = append(unregistered, "msg.MsgSendListHandler")
	}

	if o.MsgMsgUnsendListHandler == nil {
		unregistered = append(unregistered, "msg.MsgUnsendListHandler")
	}

	if o.OrderOrderDetailHandler == nil {
		unregistered = append(unregistered, "order.OrderDetailHandler")
	}

	if o.OrderOrderListHandler == nil {
		unregistered = append(unregistered, "order.OrderListHandler")
	}

	if o.ReportErrReportErrDetailHandler == nil {
		unregistered = append(unregistered, "report_err.ReportErrDetailHandler")
	}

	if o.ReportErrReportErrListHandler == nil {
		unregistered = append(unregistered, "report_err.ReportErrListHandler")
	}

	if o.UserSearchHandler == nil {
		unregistered = append(unregistered, "user.SearchHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TingtingBackendAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TingtingBackendAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *TingtingBackendAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *TingtingBackendAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *TingtingBackendAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TingtingBackendAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the tingting backend API
func (o *TingtingBackendAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TingtingBackendAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relation/Category/subCategoryList"] = relation.NewNrCategorySubCategoryListRelation(o.context, o.RelationNrCategorySubCategoryListRelationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relation/album/bookList"] = relation.NewNrAlbumBookListRelation(o.context, o.RelationNrAlbumBookListRelationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/list"] = category.NewNrCategoryList(o.context, o.CategoryNrCategoryListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/record/list"] = member.NewNrMemberRecordList(o.context, o.MemberNrMemberRecordListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/recharge/detail"] = recharge.NewNrRechargeDetail(o.context, o.RechargeNrRechargeDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/relation/Category/subCategoryList/edit"] = relation.NewNrRelationCategorySubCategoryListEdit(o.context, o.RelationNrRelationCategorySubCategoryListEditHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/relation/album/booklist/edit"] = relation.NewNrRelationAlbumBooklistEdit(o.context, o.RelationNrRelationAlbumBooklistEditHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/relation/subCategory/albumList/edit"] = relation.NewNrRelationSubCategoryAlbumListEdit(o.context, o.RelationNrRelationSubCategoryAlbumListEditHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relation/subCategory/albumList"] = relation.NewNrSubCategoryAlbumListRelation(o.context, o.RelationNrSubCategoryAlbumListRelationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/delete"] = user.NewNrUserDelete(o.context, o.UserNrUserDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/editPass"] = user.NewNrUserEditPass(o.context, o.UserNrUserEditPassHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/list"] = user.NewNrUserList(o.context, o.UserNrUserListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/login"] = user.NewNrUserLogin(o.context, o.UserNrUserLoginHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/delete"] = album.NewAlbumDelete(o.context, o.AlbumAlbumDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/detail"] = album.NewAlbumDetail(o.context, o.AlbumAlbumDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/album/edit"] = album.NewAlbumEdit(o.context, o.AlbumAlbumEditHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/album/list"] = album.NewAlbumList(o.context, o.AlbumAlbumListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/album/upload"] = album.NewAlbumUpload(o.context, o.AlbumAlbumUploadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/banner/detail"] = banner.NewBannerDetail(o.context, o.BannerBannerDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/banner/list"] = banner.NewBannerList(o.context, o.BannerBannerListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relation/book/chapterList"] = relation.NewBookChapterListRelation(o.context, o.RelationBookChapterListRelationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/relation/book/chapterList/edit"] = relation.NewBookChapterListRelationEdit(o.context, o.RelationBookChapterListRelationEditHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/delete"] = book.NewBookDelete(o.context, o.BookBookDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/detail"] = book.NewBookDetail(o.context, o.BookBookDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/book/edit"] = book.NewBookEdit(o.context, o.BookBookEditHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/book/list"] = book.NewBookList(o.context, o.BookBookListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/book/upload"] = book.NewBookUpload(o.context, o.BookBookUploadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/delete"] = category.NewCategoryDelete(o.context, o.CategoryCategoryDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/detail"] = category.NewCategoryDetail(o.context, o.CategoryCategoryDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category/edit"] = category.NewCategoryEdit(o.context, o.CategoryCategoryEditHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category/sub/edit"] = category.NewCategorySubEdit(o.context, o.CategoryCategorySubEditHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category/sub/upload"] = category.NewCategorySubUpload(o.context, o.CategoryCategorySubUploadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/category/upload"] = category.NewCategoryUpload(o.context, o.CategoryCategoryUploadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/delete"] = chapter.NewChapterDelete(o.context, o.ChapterChapterDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/detail"] = chapter.NewChapterDetail(o.context, o.ChapterChapterDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/chapter/edit"] = chapter.NewChapterEdit(o.context, o.ChapterChapterEditHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/fav/list"] = chapter.NewChapterFavList(o.context, o.ChapterChapterFavListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/history/list"] = chapter.NewChapterHistoryList(o.context, o.ChapterChapterHistoryListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chapter/list"] = chapter.NewChapterList(o.context, o.ChapterChapterListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/chapter/upload"] = chapter.NewChapterUpload(o.context, o.ChapterChapterUploadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/feedback/detail"] = feedback.NewFeedbackDetail(o.context, o.FeedbackFeedbackDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/feedback/list"] = feedback.NewFeedbackList(o.context, o.FeedbackFeedbackListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/detail"] = member.NewMemberDetail(o.context, o.MemberMemberDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/list"] = member.NewMemberList(o.context, o.MemberMemberListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/record/detail"] = member.NewMemberRecordDetail(o.context, o.MemberMemberRecordDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/file/upload"] = upload_file.NewFileUpload(o.context, o.UploadFileFileUploadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/msg/detail"] = msg.NewMsgDetail(o.context, o.MsgMsgDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/msg/send/list"] = msg.NewMsgSendList(o.context, o.MsgMsgSendListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/msg/unsend/list"] = msg.NewMsgUnsendList(o.context, o.MsgMsgUnsendListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/order/detail"] = order.NewOrderDetail(o.context, o.OrderOrderDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/order/list"] = order.NewOrderList(o.context, o.OrderOrderListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/recharge/list"] = recharge.NewRechargeList(o.context, o.RechargeRechargeListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/reportErr/detail"] = report_err.NewReportErrDetail(o.context, o.ReportErrReportErrDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/reportErr/list"] = report_err.NewReportErrList(o.context, o.ReportErrReportErrListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search"] = user.NewSearch(o.context, o.UserSearchHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TingtingBackendAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TingtingBackendAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
