// Code generated by go-swagger; DO NOT EDIT.

package version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewVersionUploadParams creates a new VersionUploadParams object
// with the default values initialized.
func NewVersionUploadParams() VersionUploadParams {
	var ()
	return VersionUploadParams{}
}

// VersionUploadParams contains all the bound params for the version upload operation
// typically these are obtained from a http.Request
//
// swagger:parameters version/upload/
type VersionUploadParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	AboutUsURL *string
	/*
	  In: formData
	*/
	Client *string
	/*
	  In: formData
	*/
	Force *float64
	/*
	  In: formData
	*/
	Msg *string
	/*版本号
	  In: formData
	*/
	Number *float64
	/*
	  In: formData
	*/
	SpecialURL *string
	/*
	  In: formData
	*/
	Status *int64
	/*Description of file contents.
	  In: formData
	*/
	Title *string
	/*当前登录用户id
	  In: formData
	*/
	Userid *int64
	/*
	  In: formData
	*/
	VersionURL *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *VersionUploadParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	fdAboutUsURL, fdhkAboutUsURL, _ := fds.GetOK("aboutUsUrl")
	if err := o.bindAboutUsURL(fdAboutUsURL, fdhkAboutUsURL, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClient, fdhkClient, _ := fds.GetOK("client")
	if err := o.bindClient(fdClient, fdhkClient, route.Formats); err != nil {
		res = append(res, err)
	}

	fdForce, fdhkForce, _ := fds.GetOK("force")
	if err := o.bindForce(fdForce, fdhkForce, route.Formats); err != nil {
		res = append(res, err)
	}

	fdMsg, fdhkMsg, _ := fds.GetOK("msg")
	if err := o.bindMsg(fdMsg, fdhkMsg, route.Formats); err != nil {
		res = append(res, err)
	}

	fdNumber, fdhkNumber, _ := fds.GetOK("number")
	if err := o.bindNumber(fdNumber, fdhkNumber, route.Formats); err != nil {
		res = append(res, err)
	}

	fdSpecialURL, fdhkSpecialURL, _ := fds.GetOK("specialUrl")
	if err := o.bindSpecialURL(fdSpecialURL, fdhkSpecialURL, route.Formats); err != nil {
		res = append(res, err)
	}

	fdStatus, fdhkStatus, _ := fds.GetOK("status")
	if err := o.bindStatus(fdStatus, fdhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTitle, fdhkTitle, _ := fds.GetOK("title")
	if err := o.bindTitle(fdTitle, fdhkTitle, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUserid, fdhkUserid, _ := fds.GetOK("userid")
	if err := o.bindUserid(fdUserid, fdhkUserid, route.Formats); err != nil {
		res = append(res, err)
	}

	fdVersionURL, fdhkVersionURL, _ := fds.GetOK("versionUrl")
	if err := o.bindVersionURL(fdVersionURL, fdhkVersionURL, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VersionUploadParams) bindAboutUsURL(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.AboutUsURL = &raw

	return nil
}

func (o *VersionUploadParams) bindClient(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Client = &raw

	return nil
}

func (o *VersionUploadParams) bindForce(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("force", "formData", "float64", raw)
	}
	o.Force = &value

	return nil
}

func (o *VersionUploadParams) bindMsg(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Msg = &raw

	return nil
}

func (o *VersionUploadParams) bindNumber(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("number", "formData", "float64", raw)
	}
	o.Number = &value

	return nil
}

func (o *VersionUploadParams) bindSpecialURL(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SpecialURL = &raw

	return nil
}

func (o *VersionUploadParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("status", "formData", "int64", raw)
	}
	o.Status = &value

	return nil
}

func (o *VersionUploadParams) bindTitle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Title = &raw

	return nil
}

func (o *VersionUploadParams) bindUserid(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("userid", "formData", "int64", raw)
	}
	o.Userid = &value

	return nil
}

func (o *VersionUploadParams) bindVersionURL(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.VersionURL = &raw

	return nil
}
