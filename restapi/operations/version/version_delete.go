// Code generated by go-swagger; DO NOT EDIT.

package version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// VersionDeleteHandlerFunc turns a function with the right signature into a version delete handler
type VersionDeleteHandlerFunc func(VersionDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VersionDeleteHandlerFunc) Handle(params VersionDeleteParams) middleware.Responder {
	return fn(params)
}

// VersionDeleteHandler interface for that can handle valid version delete params
type VersionDeleteHandler interface {
	Handle(VersionDeleteParams) middleware.Responder
}

// NewVersionDelete creates a new http.Handler for the version delete operation
func NewVersionDelete(ctx *middleware.Context, handler VersionDeleteHandler) *VersionDelete {
	return &VersionDelete{Context: ctx, Handler: handler}
}

/*VersionDelete swagger:route GET /version/delete Version versionDelete

删除

删除

*/
type VersionDelete struct {
	Context *middleware.Context
	Handler VersionDeleteHandler
}

func (o *VersionDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewVersionDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
