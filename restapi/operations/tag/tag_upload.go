// Code generated by go-swagger; DO NOT EDIT.

package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	middleware "github.com/go-openapi/runtime/middleware"
	"fmt"
	_"os"
	"tingtingbackend/models"
	"tingtingbackend/var"
)

// TagUploadHandlerFunc turns a function with the right signature into a tag upload handler
type TagUploadHandlerFunc func(TagUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TagUploadHandlerFunc) Handle(params TagUploadParams) middleware.Responder {
	return fn(params)
}

// TagUploadHandler interface for that can handle valid tag upload params
type TagUploadHandler interface {
	Handle(TagUploadParams) middleware.Responder
}

// NewTagUpload creates a new http.Handler for the tag upload operation
func NewTagUpload(ctx *middleware.Context, handler TagUploadHandler) *TagUpload {
	return &TagUpload{Context: ctx, Handler: handler}
}

/*TagUpload swagger:route POST /tag/upload Tag tagUpload

添加一个tag

*/
type TagUpload struct {
	Context *middleware.Context
	Handler TagUploadHandler
}

func (o *TagUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTagUploadParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok TagUploadOK
	var response models.InlineResponse20019
	var status models.Response
	var tag models.Tag
	var msg string
	var code int64

	msg = "ok"
	code = 200

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	/*if(Params.IconUrl != ""){
		fmt.Println(Params.IconUrl)
		tag.Icon = Params.IconUrl
	}*/

	//tt:= int64(-1)

	if(*(Params.Tagid) == -1){ //新建
		fmt.Println("new")
		fmt.Println("Params.Summary is",Params.Summary)
		tag.Summary = *(Params.Summary)
		tag.Name = Params.Title
		//t := int64(-1)
		//tag.tag_Id = &t
		//tag.Status = *(Params.Status)
		/*if(Params.IconUrl != ""){
			tag.Icon = Params.IconUrl
		}*/
		//tag.User_id = *(Params.MemberID)
		db.Table("tags").Create(&tag)
	}else{ //更新
		//fmt.Println("edit")
		//db.Table("sub_tag_items").Where("id=?",*(Params.tagId)).Last(&tag)
		/*if(Params.IconUrl != ""){
			fmt.Println("1",Params.IconUrl)
			db.Exec("update tags set name=?,status=?,summary=?,icon=? where id=?",Params.Title,0,*(Params.Summary),Params.IconUrl,&(Params.Tagid))
		}else*/{
			//fmt.Println("2",Params.IconUrl,*(Params.Summary))
			summary := *(Params.Summary)
			db.Exec("update tags set name=?,status=?,summary=? where id=?",Params.Title,0,summary,&(Params.Tagid))
		}

	}

	status.UnmarshalBinary([]byte(_var.Response200(code,msg)))
	response.Status = &status
	ok.SetPayload(&response)
	o.Context.Respond(rw, r, route.Produces, route, ok)

}
