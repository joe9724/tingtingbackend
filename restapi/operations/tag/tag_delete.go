// Code generated by go-swagger; DO NOT EDIT.

package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TagDeleteHandlerFunc turns a function with the right signature into a tag delete handler
type TagDeleteHandlerFunc func(TagDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TagDeleteHandlerFunc) Handle(params TagDeleteParams) middleware.Responder {
	return fn(params)
}

// TagDeleteHandler interface for that can handle valid tag delete params
type TagDeleteHandler interface {
	Handle(TagDeleteParams) middleware.Responder
}

// NewTagDelete creates a new http.Handler for the tag delete operation
func NewTagDelete(ctx *middleware.Context, handler TagDeleteHandler) *TagDelete {
	return &TagDelete{Context: ctx, Handler: handler}
}

/*TagDelete swagger:route GET /tag/delete Tag tagDelete

删除专辑

删除专辑

*/
type TagDelete struct {
	Context *middleware.Context
	Handler TagDeleteHandler
}

func (o *TagDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTagDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
