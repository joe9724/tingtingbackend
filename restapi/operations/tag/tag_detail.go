// Code generated by go-swagger; DO NOT EDIT.

package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"tingtingbackend/models"
	"fmt"
	"tingtingbackend/var"
)

// TagDetailHandlerFunc turns a function with the right signature into a tag detail handler
type TagDetailHandlerFunc func(TagDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TagDetailHandlerFunc) Handle(params TagDetailParams) middleware.Responder {
	return fn(params)
}

// TagDetailHandler interface for that can handle valid tag detail params
type TagDetailHandler interface {
	Handle(TagDetailParams) middleware.Responder
}

// NewTagDetail creates a new http.Handler for the tag detail operation
func NewTagDetail(ctx *middleware.Context, handler TagDetailHandler) *TagDetail {
	return &TagDetail{Context: ctx, Handler: handler}
}

/*TagDetail swagger:route GET /tag/detail Tag tagDetail

专辑详情

专辑详情

*/
type TagDetail struct {
	Context *middleware.Context
	Handler TagDetailHandler
}

func (o *TagDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTagDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok TagDetailOK
	var response models.InlineResponse20033

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//query
	var album models.Tag
	db.Table("tags").Where("id=?",Params.TagID).First(&album)
	//data
	response.Data = &album


	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
