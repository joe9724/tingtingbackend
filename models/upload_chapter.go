// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadChapter upload chapter
// swagger:model UploadChapter
type UploadChapter struct {

	// bookid
	// Required: true
	Bookid *int64 `json:"bookid"`

	// record file
	// Required: true
	RecordFile interface{} `json:"recordFile"`

	// userid
	// Required: true
	Userid *int64 `json:"userid"`
}

// Validate validates this upload chapter
func (m *UploadChapter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBookid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecordFile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UploadChapter) validateBookid(formats strfmt.Registry) error {

	if err := validate.Required("bookid", "body", m.Bookid); err != nil {
		return err
	}

	return nil
}

func (m *UploadChapter) validateRecordFile(formats strfmt.Registry) error {

	return nil
}

func (m *UploadChapter) validateUserid(formats strfmt.Registry) error {

	if err := validate.Required("userid", "body", m.Userid); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UploadChapter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UploadChapter) UnmarshalBinary(b []byte) error {
	var res UploadChapter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
