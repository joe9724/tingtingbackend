// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Msg msg
// swagger:model Msg
type Msg struct {

	// create time
	// Required: true
	CreateTime *int64 `json:"createTime"`

	// from
	// Required: true
	From *string `json:"from"`

	// sub title
	// Required: true
	SubTitle *string `json:"subTitle"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this msg
func (m *Msg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Msg) validateCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("createTime", "body", m.CreateTime); err != nil {
		return err
	}

	return nil
}

func (m *Msg) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *Msg) validateSubTitle(formats strfmt.Registry) error {

	if err := validate.Required("subTitle", "body", m.SubTitle); err != nil {
		return err
	}

	return nil
}

func (m *Msg) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Msg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Msg) UnmarshalBinary(b []byte) error {
	var res Msg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
