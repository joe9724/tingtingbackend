// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MemberLogin member login
// swagger:model MemberLogin
type MemberLogin struct {
	ID *int64 `json:"id" gorm:"AUTO_INCREMENT"`
	// avatar
	// Required: true
	Avatar *string `json:"avatar"`

	// gender
	// Required: true
	Gender *int64 `json:"gender"`

	// role
	// Required: true
	Role *string `json:"role"`

	// routers
	// Required: true
	Routers MemberLoginRouters `json:"routers"`

	// token
	// Required: true
	Token *string `json:"token"`

	// userid
	// Required: true
	Userid *int64 `json:"userid"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this member login
func (m *MemberLogin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatar(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRouters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberLogin) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

func (m *MemberLogin) validateGender(formats strfmt.Registry) error {

	if err := validate.Required("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *MemberLogin) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *MemberLogin) validateRouters(formats strfmt.Registry) error {

	if err := validate.Required("routers", "body", m.Routers); err != nil {
		return err
	}

	if err := m.Routers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("routers")
		}
		return err
	}

	return nil
}

func (m *MemberLogin) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *MemberLogin) validateUserid(formats strfmt.Registry) error {

	if err := validate.Required("userid", "body", m.Userid); err != nil {
		return err
	}

	return nil
}

func (m *MemberLogin) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemberLogin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemberLogin) UnmarshalBinary(b []byte) error {
	var res MemberLogin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
