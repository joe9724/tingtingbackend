// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Record record
// swagger:model Record
type Record struct {
	ID *int64 `json:"id" gorm:"AUTO_INCREMENT"`
	// cover
	// Required: true
	Cover *string `json:"cover"`

	// duration
	// Required: true
	Duration *int64 `json:"duration"`

	// play count
	// Required: true
	PlayCount *int64 `json:"playCount"`

	// sub title
	// Required: true
	SubTitle *string `json:"subTitle"`

	// summary
	// Required: true
	Summary *string `json:"summary"`

	// title
	// Required: true
	Title *string `json:"title"`

	// url
	// Required: true
	URL *string `json:"url"`

	// user Id
	// Required: true
	UserID *int64 `json:"userId"`

	Time *int64 `json:"time"`

	Name *string `json:"name"`
}

// Validate validates this record
func (m *Record) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCover(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlayCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Record) validateCover(formats strfmt.Registry) error {

	if err := validate.Required("cover", "body", m.Cover); err != nil {
		return err
	}

	return nil
}

func (m *Record) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *Record) validatePlayCount(formats strfmt.Registry) error {

	if err := validate.Required("playCount", "body", m.PlayCount); err != nil {
		return err
	}

	return nil
}

func (m *Record) validateSubTitle(formats strfmt.Registry) error {

	if err := validate.Required("subTitle", "body", m.SubTitle); err != nil {
		return err
	}

	return nil
}

func (m *Record) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

func (m *Record) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *Record) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

func (m *Record) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.URL); err != nil {
		return err
	}

	return nil
}

func (m *Record) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *Record) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Record) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Record) UnmarshalBinary(b []byte) error {
	var res Record
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
