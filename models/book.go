// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Book book
// swagger:model Book
type Book struct {

	// author avatar
	// Required: true
	AuthorAvatar *string `json:"authorAvatar"`

	// author name
	// Required: true
	AuthorName *string `json:"authorName"`

	// clips number
	// Required: true
	ClipsNumber *int64 `json:"clipsNumber"`

	// icon
	// Required: true
	Icon *string `json:"icon"`

	// name
	// Required: true
	Name *string `json:"name"`

	// play count
	// Required: true
	PlayCount *int64 `json:"playCount"`

	// show icon
	// Required: true
	ShowIcon *bool `json:"showIcon"`

	// sub category Id
	// Required: true
	SubCategoryID *int64 `json:"subCategoryId"`

	// sub title
	// Required: true
	SubTitle *string `json:"subTitle"`

	// summary
	// Required: true
	Summary *string `json:"summary"`
}

// Validate validates this book
func (m *Book) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorAvatar(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAuthorName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClipsNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIcon(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlayCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShowIcon(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubCategoryID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Book) validateAuthorAvatar(formats strfmt.Registry) error {

	if err := validate.Required("authorAvatar", "body", m.AuthorAvatar); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateAuthorName(formats strfmt.Registry) error {

	if err := validate.Required("authorName", "body", m.AuthorName); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateClipsNumber(formats strfmt.Registry) error {

	if err := validate.Required("clipsNumber", "body", m.ClipsNumber); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateIcon(formats strfmt.Registry) error {

	if err := validate.Required("icon", "body", m.Icon); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Book) validatePlayCount(formats strfmt.Registry) error {

	if err := validate.Required("playCount", "body", m.PlayCount); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateShowIcon(formats strfmt.Registry) error {

	if err := validate.Required("showIcon", "body", m.ShowIcon); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateSubCategoryID(formats strfmt.Registry) error {

	if err := validate.Required("subCategoryId", "body", m.SubCategoryID); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateSubTitle(formats strfmt.Registry) error {

	if err := validate.Required("subTitle", "body", m.SubTitle); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Book) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Book) UnmarshalBinary(b []byte) error {
	var res Book
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
