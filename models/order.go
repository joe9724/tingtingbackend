// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
// swagger:model Order
type Order struct {

	// album Id
	// Required: true
	AlbumID *int64 `json:"albumId"`

	// album name
	// Required: true
	AlbumName *string `json:"albumName"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// member Id
	// Required: true
	MemberID *int64 `json:"memberId"`

	// member name
	// Required: true
	MemberName *string `json:"memberName"`

	// order no
	// Required: true
	OrderNo *string `json:"orderNo"`

	// status
	// Required: true
	Status *int64 `json:"status"`

	// time
	// Required: true
	Time *int64 `json:"time"`

	// value
	// Required: true
	Value *float64 `json:"value"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlbumID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAlbumName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemberID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemberName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrderNo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateAlbumID(formats strfmt.Registry) error {

	if err := validate.Required("albumId", "body", m.AlbumID); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateAlbumName(formats strfmt.Registry) error {

	if err := validate.Required("albumName", "body", m.AlbumName); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateMemberID(formats strfmt.Registry) error {

	if err := validate.Required("memberId", "body", m.MemberID); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateMemberName(formats strfmt.Registry) error {

	if err := validate.Required("memberName", "body", m.MemberName); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateOrderNo(formats strfmt.Registry) error {

	if err := validate.Required("orderNo", "body", m.OrderNo); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
