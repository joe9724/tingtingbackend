// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Member member
// swagger:model Member
type Member struct {

	// area
	// Required: true
	Area *string `json:"area"`

	// avatar
	// Required: true
	Avatar *string `json:"avatar"`

	// birth
	// Required: true
	Birth *string `json:"birth"`

	// gender
	// Required: true
	Gender *int64 `json:"gender"`

	// grade
	// Required: true
	Grade *string `json:"grade"`

	// id
	// Required: true
	ID *int64 `json:"id" gorm:"AUTO_INCREMENT"`

	// level
	// Required: true
	Level *int64 `json:"level"`

	// name
	// Required: true
	Name *string `json:"name"`

	// phone
	// Required: true
	Phone *string `json:"phone"`

	// tags
	// Required: true
	Tags *string `json:"tags"`

	Ts *int64 `json:"ts"`

	BuyedAlbumsCount *int64 `json:"buyedAlbumsCount"`

	Status *int64 `json:"status"`
}

// Validate validates this member
func (m *Member) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArea(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAvatar(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBirth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGrade(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Member) validateArea(formats strfmt.Registry) error {

	if err := validate.Required("area", "body", m.Area); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateBirth(formats strfmt.Registry) error {

	if err := validate.Required("birth", "body", m.Birth); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateGender(formats strfmt.Registry) error {

	if err := validate.Required("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateGrade(formats strfmt.Registry) error {

	if err := validate.Required("grade", "body", m.Grade); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Member) validatePhone(formats strfmt.Registry) error {

	if err := validate.Required("phone", "body", m.Phone); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Member) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Member) UnmarshalBinary(b []byte) error {
	var res Member
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
