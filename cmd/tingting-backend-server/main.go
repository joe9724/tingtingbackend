// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"
	"os"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	loads "github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"tingtingbackend/restapi"
	"tingtingbackend/restapi/operations"
	_"tingtingbackend/var"
	_"fmt"
	_"tingtingbackend/models"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	/*db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}

	db.CreateTable(&models.Book{})
	db.CreateTable(&models.Msg{})
	db.CreateTable(&models.Error{})
	db.CreateTable(&models.User{})
	db.CreateTable(&models.Album{})
	db.CreateTable(&models.Banner{})
	db.CreateTable(&models.Body{})
	db.CreateTable(&models.Category{})
	db.CreateTable(&models.CategorySubCategory{})
	db.CreateTable(&models.Chapter{})
	db.CreateTable(&models.ErrorInfo{})
	db.CreateTable(&models.Feedback{})
	db.CreateTable(&models.Member{})
	//db.CreateTable(&models.MemberLogin{})
	db.CreateTable(&models.MemberLoginRouters{})
	db.CreateTable(&models.Order{})
	//db.CreateTable(&models.Recommend{})
	//db.CreateTable(&models.RecommendFrom{})
	db.CreateTable(&models.Record{})
	db.CreateTable(&models.Resources{})
	db.CreateTable(&models.ResourcesData{})
	db.CreateTable(&models.Response{})
	db.CreateTable(&models.Router{})
	db.CreateTable(&models.SubCategoryItem{})
	//db.CreateTable(&models.UploadChapter{})*/

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewTingtingBackendAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Tingting(Backend)"
	parser.LongDescription = "Tingting(Backend)"

	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
